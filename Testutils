package utility;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

public class TestUtils {

	public TestUtils(WebDriver driver) {
		TestUtils.driver = driver;
		PageFactory.initElements(driver, this);
	}

	static WebDriver driver;

	public static Boolean bl_flag = false;
	static double total_var = 0;

	public static String getRandomSSN() {
		String ssn = null;
		SimpleDateFormat f = new SimpleDateFormat("yyMMddss");
		ssn = f.format(new Date()) + 0;

		return ssn;

	}

	public static void scorllToElementAndClick(WebElement e) {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);", e);
		e.click();
	}

	public static void scorllToElement(WebElement e) {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].scrollIntoView(true);", e);
	}

	public static void jsSendKeys(WebElement e, String value) {
		JavascriptExecutor jse = (JavascriptExecutor) driver;
		jse.executeScript("arguments[0].setAttribute('value', '" + value + "')", e);
	}

	public static void jsExecutorClick(WebElement e) {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("arguments[0].click();", e);
	}

	public static void scrollDown(int pixel) {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("window.scrollBy(0," + pixel + ")");
	}

	public static void scrollUp(int pixel) {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		executor.executeScript("window.scrollBy(0," + "-" + pixel + ")");
	}

	public static void sleep(long milsec) {
		try {
			Thread.sleep(milsec);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public static void navigation_to_window() throws Throwable {
		Set<String> st = driver.getWindowHandles();
		for (String windowhandle : st) {
			driver.switchTo().window(windowhandle);
		}
	}

	public static void waitForElemnt(WebDriver driver, WebElement element) {
		WebDriverWait wait = new WebDriverWait(driver, 20);

		wait.until(ExpectedConditions.elementToBeClickable(element));
	}

	public static WebElement explicit_wait_elementvisibility(WebElement element) {
		WebDriverWait wait = new WebDriverWait(driver, 20);
		return wait.until(ExpectedConditions.visibilityOf(element));

	}

	public static WebElement explicit_wait_elementvisibility(WebElement element, int secToWait) {
		WebDriverWait wait = new WebDriverWait(driver, secToWait);
		return wait.until(ExpectedConditions.visibilityOf(element));

	}

	public static WebElement fluent_wait(WebElement element, int secToWait) throws Exception {
		WebElement e = null;
		for (int i = 0; i < secToWait; i++) {
			try {
				e = explicit_wait_elementvisibility(element, 2);
				if (e != null) {
					break;
				}
			} catch (Exception e1) {
				throw new Exception("element not visible" + e1.getMessage());

			}
		}

		return e;

	}

	public static void explicit_wait(WebElement element) {
		WebDriverWait wait = new WebDriverWait(driver, 20);
		wait.until(ExpectedConditions.visibilityOf(element));
	}

	public static void wait(WebElement element) {
		WebDriverWait wait = new WebDriverWait(driver, 20);
		wait.until(ExpectedConditions.visibilityOf(element));
	}

	public void explicit_wait_elementvisibility(List<WebElement> list) {
		WebDriverWait wait = new WebDriverWait(driver, 40);
		wait.until(ExpectedConditions.visibilityOfAllElements(list));

	}

	public String format_string(String text) {
		String val = text.replace(",", "");
		return val;

	}

	public void pageTimeOut() {
		driver.manage().timeouts().pageLoadTimeout(55, TimeUnit.SECONDS);
	}

	public void explicit_wait_title(String title) {
		WebDriverWait wait = new WebDriverWait(driver, 180);
		wait.until(ExpectedConditions.titleContains(title));
	}

	public void clickandhold(WebElement element) {
		Actions action = new Actions(driver);
		action.clickAndHold(element).build().perform();
	}

	public String integertostring(String value) {
		int values = new BigDecimal(value).setScale(0, RoundingMode.HALF_UP).intValue();
		String svalue = Integer.toString(values);
		return svalue;
	}

	public void select_value(WebElement element, String value) {
		Select select = new Select(element);
		select.selectByVisibleText(value);

	}

	public static String generateRandomDate(String format, String startdate, String enddate) throws Throwable {
		DateFormat formatter = new SimpleDateFormat(format);
		Calendar cal = Calendar.getInstance();
		cal.setTime(formatter.parse(startdate));
		Long value1 = cal.getTimeInMillis();

		cal.setTime(formatter.parse(enddate));
		Long value2 = cal.getTimeInMillis();

		long value3 = (long) (value1 + Math.random() * (value2 - value1));
		cal.setTimeInMillis(value3);
		return formatter.format(cal.getTime());
	}

	public void doubleclick(WebElement element) {
		Actions action = new Actions(driver);
		action.doubleClick(element).perform();
	}

	public void doubleClickAction(WebElement ele) {
		Actions act = new Actions(driver);
		act.moveToElement(ele).doubleClick(ele).build().perform();
	}

	public void clearAction(WebElement ele) {
		Actions act = new Actions(driver);
		act.sendKeys(Keys.chord(Keys.CONTROL, "a"));
		act.sendKeys(Keys.BACK_SPACE);

	}

	public void handle_frame(WebElement frameid) {
		driver.switchTo().frame(frameid);
	}

	public void click_element(WebElement element) {
		explicit_wait(element);
		((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
	}

	public static void click(WebElement element) {
		try {
			Thread.sleep(5000);
			element.click();
			System.out.println("element is clicked");
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("element is not clicked");
		}
	}

	public static void enter_values(WebElement element, String value) {
		if (driver != null) {
			explicit_wait_elementvisibility(element);
			element.clear();
			element.sendKeys(value);
		}
	}

	public static void press_Enter(WebElement element) {
		explicit_wait_elementvisibility(element);
		element.sendKeys(Keys.ENTER);
	}

	public static void refresh() {
		driver.navigate().refresh();
		waitForPageLoad();
	}

	public static void enter() {
		Actions actions = new Actions(driver);
		actions.sendKeys(Keys.ENTER).perform();
	}

	public static void navigateBack() {
		driver.navigate().back();
	}

	public void enter_values(WebElement element, int intvalue) {
		explicit_wait_elementvisibility(element);
		element.clear();
		String value = Integer.toString(intvalue);
		element.sendKeys(value);
	}

	public static void radioselect(List<WebElement> list, String value) {
		for (WebElement element : list) {
			if (element.getText().equalsIgnoreCase(value)) {
				element.click();
			}
		}
	}

	public void handle_dropdown(WebElement arrowclick, List<WebElement> dropdownselect, String value) throws Throwable {
		pageTimeOut();
		explicit_wait_elementvisibility(arrowclick);
		arrowclick.click();
		for (WebElement element : dropdownselect) {
			if (element.getText().equals(value)) {
				element.click();
			}
		}
	}

	public void click_radio(List<WebElement> radiolist, String excelvalue) throws Throwable {
		pageTimeOut();
		explicit_wait_elementvisibility(radiolist);
		for (WebElement element : radiolist) {
			if (element.getText().equals(excelvalue)) {
				((JavascriptExecutor) driver).executeScript("arguments[0].click();", element);
			}
		}

	}

	public void kuidrpselect(String dropelement, String fval) throws Throwable {
		pageTimeOut();
		WebElement Svalue = driver.findElement(By.cssSelector(dropelement));
		explicit_wait_elementvisibility(Svalue);
		String name = Svalue.getAttribute("aria-owns");
		WebElement toexp = Svalue.findElement(By.cssSelector("span.k-icon"));
		toexp.click();
		Thread.sleep(3000);
		driver.findElement(By.cssSelector("ul[id='" + name + "']"))
//	             .findElement(By.xpath("./li[text()='"+fval+"']")).click();
				.findElement(By.xpath("./li[text()=\"" + fval + "\"]")).click();

	}

	public void kuidrpselect_contains(String dropelement, String fval) throws Throwable {
		pageTimeOut();
		WebElement Svalue = driver.findElement(By.cssSelector(dropelement));
		explicit_wait_elementvisibility(Svalue);
		String name = Svalue.getAttribute("aria-owns");
		WebElement toexp = Svalue.findElement(By.cssSelector("span.k-icon"));
		toexp.click();
		Thread.sleep(3000);
		driver.findElement(By.cssSelector("ul[id='" + name + "']"))
				.findElement(By.xpath("./li[contains(text(),'" + fval + "')]")).click();

	}

	public static boolean isElementDisplayed(WebElement element) {
		try {
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOf(element));
			return element.isDisplayed();
		} catch (org.openqa.selenium.NoSuchElementException | org.openqa.selenium.StaleElementReferenceException
				| org.openqa.selenium.TimeoutException e) {
			return false;
		}
	}

	public static void waitForElementToBeGone(WebDriver driver, WebElement element) {
		if (isElementDisplayed(element)) {
			new WebDriverWait(driver, 5000L).until(ExpectedConditions.invisibilityOf(element));
		}
	}

	// Added By Owais on 2Feb

	public static void verifyUrl(String Actual, String Expd) {
		String Expected = driver.getCurrentUrl();
		Assert.assertEquals(Actual, Expected);

	}

	public static Boolean verifyTitle(String Expected) {
		String Actual = driver.getTitle();
		System.out.println("this is Actual Title " + Actual);
		System.out.println("this is Expected Title " + Expected);
		if (Actual.equals(Expected)) {
			bl_flag = true;
			return bl_flag;
		} else {
			bl_flag = false;
			return bl_flag;
		}

	}

	public static Boolean verifyUrl(String Expected) {
		String Actual = driver.getCurrentUrl();
		System.out.println("this is Actual URL " + Actual);
		System.out.println("this is Expected URL " + Expected);
		if (Actual.equals(Expected)) {
			bl_flag = true;
		} else {
			bl_flag = false;
		}
		return bl_flag;
	}

	// Mahesh Code May 2021
	public static String getCustodianSettingsTitle() {

		String returnTitle = "";

		if (driver.getCurrentUrl().contains("wfs")) {
			returnTitle = "Woodbury Financial Services, Inc. - Settings";

		} else if (driver.getCurrentUrl().contains("RAA")) {
			returnTitle = "Woodbury Financial Services, Inc. - Settings";

		} else if (driver.getCurrentUrl().contains("SPF")) {
			returnTitle = "Woodbury Financial Services, Inc. - Settings";

		} else if (driver.getCurrentUrl().contains("FSC")) {
			returnTitle = "Woodbury Financial Services, Inc. - Settings";

		} else {
			Assert.assertFalse(false, "Unknown UTL, cant find Custodian settings page title for this URL.");
		}

		return returnTitle;

	}

	public static void waitForPageLoad() {
		JavascriptExecutor js = (JavascriptExecutor) driver;

		// Initially bellow given if condition will check ready state of page.
		if (js.executeScript("return document.readyState").toString().equals("complete")) {
			System.out.println("Page Is loaded.");
			return;
		}

		// This loop will rotate for 25 times to check If page Is ready after every 1
		// second.
		// You can replace your value with 25 If you wants to Increase or decrease wait
		// time.
		for (int i = 0; i < 25; i++) {
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
			}
			// To check page ready state.
			if (js.executeScript("return document.readyState").toString().equals("complete")) {
				break;
			}
		}

	}

	public static ArrayList<String> getAssetColorCodes() {

		ArrayList<String> colorCodes = new ArrayList<>();
		colorCodes.add("3b7597");
		colorCodes.add("a0b86d");
		colorCodes.add("f6bb32");
		colorCodes.add("125b7a");
		colorCodes.add("393e41");
		colorCodes.add("6a777e");
		colorCodes.add("6674bc");
		colorCodes.add("935260");
		colorCodes.add("8cb2c8");
		colorCodes.add("c6d4a7");
		colorCodes.add("fad684");
		colorCodes.add("719daf");
		colorCodes.add("888b8d");
		colorCodes.add("a6adb2");
		colorCodes.add("a3acd7");
		colorCodes.add("be97a0");
		colorCodes.add("9ED2F0");
		colorCodes.add("E6F7C0");
		colorCodes.add("FFECC1");
		colorCodes.add("BCEBFF");
		return colorCodes;
	}

	public static void Get_Text_Verification_equalsIgnoreCase(WebElement Element, String expectedText)
			throws InterruptedException {
		String table2 = Element.getText();
		if (table2.equalsIgnoreCase(expectedText)) {
			System.out.println(table2 + "_Is Text Verify Successfully");
//					Vaildation_Message(table2+"_Is Text Verify Successfully");
		} else {
			Assert.fail(table2 + "_Is Text Not Verify");
		}
	}

	public static void Get_Text_Verification(WebElement Element, String expectedText) throws InterruptedException {

		String table2 = Element.getText();
		if (table2.equals(expectedText)) {
			System.out.println(table2 + "_Is Text Verify Successfully");
//					Vaildation_Message(table2+"_Is Text Verify Successfully");
		} else {
			Assert.fail(table2 + "_Is Text Not Verify");
		}
	}

	public static void Get_All_Caps(WebElement Element, String expectedText) {
		String table2 = Element.getText();
		if (table2.equals(expectedText)) {
			System.out.println(table2 + "_Is All Caps Text Verify Successfully");
//					Vaildation_Message(table2+"_Is All Caps Text Verify Successfully");
		} else {
			Assert.fail(table2 + "_Is All Caps Text Not Verify");
		}
	}

	public static void Get_Font_Text_Verification(WebElement Element, String expectedText) {
		String table2 = Element.getCssValue("text-align");
		if (table2.equals(expectedText)) {
			System.out.println(table2 + "_Is Font Text Verify Successfully");
//					Vaildation_Message(table2+"_Is Font Text Verify Successfully");
		} else {
			Assert.fail(table2 + "_Is Font Text not Verify");
		}
	}

	public static void GetSizeOfText(WebElement Element, String expectedText) {
		String table2 = Element.getCssValue("font-size");
		if (table2.equals(expectedText)) {
			System.out.println(table2 + "_Is Size Verify Successfully");
//					Vaildation_Message(table2+"_Is Size Verify Successfully");
		} else {
			Assert.fail(table2 + "_Is Size not Verify");
		}
	}

	public static void GetTextFontFamily(WebElement Element, String expectedText) {
		String table2 = Element.getCssValue("font-family");
		if (table2.equals(expectedText)) {
			System.out.println(table2 + "_Is font-family Successfull");
//					Vaildation_Message(table2+"_Is font-family Successfully");
		} else {
			Assert.fail(table2 + "_Is Font not Verify");
		}
	}

	public static boolean verifyWaitForPageLoadWithTitle(String pageTitle) {
		boolean result = false;
		if (driver.getTitle().contains(pageTitle)) {
			while (((JavascriptExecutor) driver).executeScript("return document.readyState").toString()
					.equals("complete")) {
				result = true;
				break;

			}
		}
		return result;
	}

	public static boolean sortByGivenValues(List<WebElement> marketValues, String typeOfSort)
			throws InterruptedException {
		boolean result = false;
		ArrayList<Double> obtainedList = new ArrayList<>();
		@SuppressWarnings("unused")
		ArrayList<Double> sortedList = new ArrayList<>();
		// ArrayList<WebElement> rows =
		// (ArrayList<WebElement>)getDriver().findElements(By.xpath(Ele));
		// System.out.println(marketValues.size());
		Thread.sleep(5000);
		for (WebElement marketValue : marketValues) {
			String text = marketValue.getText();
			text = marketValue.getText().replaceAll(",", "");
			text = text.replaceAll("/", "");
			if (text.charAt(0) == '$') {
				text = text.substring(1);
			}
			obtainedList.add(Double.parseDouble(text));
			System.out.println("Bfore Sorting" + marketValue.getText());
		}
		double prevValue = obtainedList.get(0), temp = 0;
		if (typeOfSort.equalsIgnoreCase("asc")) {
			for (int i = 1; i <= obtainedList.size() - 1; i++) {
				temp = obtainedList.get(i);
				System.out.println("Ascending Order Verification:" + prevValue);
				if (prevValue < temp) {
					result = true;
					prevValue = temp;
				} else {
					result = false;
					break;

				}
			}
			System.out.println("Ascending Order Verification:" + prevValue);

		}
		return result;
	}

	public static void showMore(List<WebElement> showMoreCount) throws InterruptedException {
		ArrayList<String> obtainedList1 = new ArrayList<>();
		int size = showMoreCount.size();

		System.out.println("Size---------------" + size);
		if (showMoreCount.size() > 5) {
			System.out.println("More Then Five Holding available");

		} else {
			Assert.fail("Less Then Five Holding Available");
		}
	}

	public static void showless(List<WebElement> showMoreCount) throws InterruptedException {

		ArrayList<String> obtainedList1 = new ArrayList<>();
		System.out.println(showMoreCount.size());
		if (showMoreCount.size() <= 5) {
			System.out.println("Less Then Five Holding available");

		} else {
			Assert.fail("More Then Five Holding Available In Top Holding");
		}
	}

	public static void GetTitle(String expectedText) {
		String table2 = driver.getTitle();
		if (table2.equals(expectedText)) {
//					Vaildation_Message("Is_"+driver.getTitle()+"_Verify Successfully");
			System.out.println("Is_" + driver.getTitle() + "_Verify Successfully");
		} else {

			Assert.fail("Is_" + driver.getTitle() + "_Not Verify");
		}
	}

	public static void WaitExpectedConditions(WebElement Element) {
		WebDriverWait wait = new WebDriverWait(driver, 10);
		WebElement element = wait.until(ExpectedConditions.elementToBeClickable((Element)));
		element = wait.until(ExpectedConditions.visibilityOf((Element)));
		element.click();
	}

	public static WebElement waitForElement(WebElement e) {
		WebDriverWait wait = new WebDriverWait(driver, 20);
		Assert.assertTrue(wait.until(ExpectedConditions.visibilityOf(e)) != null);
		return wait.until(ExpectedConditions.visibilityOf(e));
	}

	public static List<WebElement> waitForElements(List<WebElement> e) {

		WebDriverWait wait = new WebDriverWait(driver, 20);

		// Assert.assertNotNull(wait.until(ExpectedConditions.visibilityOfAllElements(e)));

		@SuppressWarnings("unused")
		List<WebElement> ele = wait.until(ExpectedConditions.visibilityOfAllElements(e));

		return wait.until(ExpectedConditions.visibilityOfAllElements(e));
	}

	public static void VerifyingThe_AcountDetailsArrowsDsecAndAscOrder(WebElement ele, WebElement ele1)
			throws InterruptedException {

		if (ele.getAttribute("class").equals("sort_arrow_desc"))

		{
			System.out.println("Arrow Position_" + ele.getAttribute("class") + "_Is_Verifyed");
		} else {
			Assert.fail("Arrow Position_" + ele.getAttribute("class") + "_Is_Not_Verifyed");
		}
		Thread.sleep(3000);
		ele1.click();
		Thread.sleep(3000);
		if (ele1.getAttribute("class").equals("sort_arrow_asc")) {
			System.out.println("Arrow Position_" + ele1.getAttribute("class") + "_Is_Verifyed");
		} else {
			Assert.fail("Arrow Position_" + ele1.getAttribute("class") + "_Is_Not_Verifyed");
		}

	}

	public static void VerifyingTheAccountDetailsTileSortingForAscendingandDescendingOrderRegistration(
			List<WebElement> actRegString, WebElement clickAsceButton, WebElement showAll) throws InterruptedException {

		ArrayList<String> obtainedList1 = new ArrayList<>();
		ArrayList<String> sortedList1 = new ArrayList<>();
		WebDriverWait wait = new WebDriverWait(driver, 200);
		wait.until(ExpectedConditions.visibilityOf(clickAsceButton));
		clickAsceButton.click();
		// get Asc values and reverse them
		Thread.sleep(3000);
		for (WebElement row : actRegString) {
			obtainedList1.add(row.getText());
		}
		System.out.println("Before reversing" + "\n" + obtainedList1);
//				Collections.reverse(obtainedList1);
		System.out.println("After reversing" + "\n" + obtainedList1);
		// make UI values to Desc and compare bith lists

		wait.until(ExpectedConditions.visibilityOf(clickAsceButton));

		clickAsceButton.click();
		Thread.sleep(2000);
		for (WebElement row : actRegString) {
			sortedList1.add(row.getText());
		}
		System.out.println("Before :" + "\n" + obtainedList1);
		System.out.println("After:" + "\n" + sortedList1);

		if (obtainedList1.equals(sortedList1)) {
			System.out.println("Final Verification:" + obtainedList1);
//					verifySteps("Successfully verified Desc order");
		} else {
			Assert.fail("Not Sorted");
		}
		// verify Asc order
//				Collections.reverse(obtainedList1);
		// ShowAll.click();
		Thread.sleep(3000);
//				pagerefer(driver);
		Thread.sleep(5000);
		clickAsceButton.click();
		Thread.sleep(6000);
//				showAll.click();
		sortedList1.clear();
		Thread.sleep(3000);
		for (WebElement row : actRegString) {
			sortedList1.add(row.getText());
		}
		System.out.println(
				"**************************************************************************************************");
		System.out.println("Before Sorting:" + obtainedList1);
		System.out.println("After Sorting:" + sortedList1);

		if (obtainedList1.equals(sortedList1)) {
			System.out.println("Final Verification :" + obtainedList1);
//					verifySteps("Successfully verified ASC order");
		} else {
			Assert.fail("Not Sorted");
		}

	}

	public static void finding_The_Aggregate_Market_Value_in_AccountDetails(List<WebElement> marketValueActDetails)
			throws InterruptedException {
		// ArrayList<WebElement> rows = (ArrayList<WebElement>)
		// driver.findElements(By.xpath(path));

		int tota = marketValueActDetails.size();
		Thread.sleep(3000);
		System.out.println(tota);
		double Total_Amount = 0.0;
		for (WebElement row : marketValueActDetails) {
			System.out.println(row.getText());
			String cells = row.getText();
			String text = cells.replaceAll(",", "");
			// System.out.println(text);
			double cellint = Double.parseDouble(text);
			Total_Amount += cellint;
			// System.out.println(cellint);
			total_var = Total_Amount;
		}
		System.out.println((long) Total_Amount + "All values");
//				Utils.Vaildation_Message("Total Aggregate Market Value_"+(long)Total_Amount+"_is_Verifyed");
	}

	public static void Market_Values_and_Total_Market_Values(WebElement Ele) {
		String str = Ele.getText();
		System.out.println(str);
		String strper = str.replaceAll(",", "");
		System.out.println(strper);
		double amount = Double.parseDouble(strper);
		total_var = Math.round(total_var * 100.0) / 100.0;
		if (total_var == amount) {
			System.out.println("Market_Values_" + (long) total_var + "_Total_Market_Values_" + (long) amount);
//					Utils.Vaildation_Message("Market_Values_and_Total_Market_Values_ is_Verifyed");
		} else {
			Assert.fail(
					"Market_Values_" + (long) total_var + "_Total_Market_Values_" + (long) amount + "_ is_Not_Matched");
		}
	}

	public static boolean Dropdown(String accNumberElement, String AccNumbertoVerify) throws Exception {
		boolean result = false;
		if (AccNumbertoVerify.equals(driver.findElement(By.xpath(AccNumbertoVerify)).getText())) {
			result = true;

		} else {
			throw new Exception("Account number from deeplink didnt match the number present in the Account Details");
		}
		return result;
	}

	public static void VerifyingTheAccountDetailsTileSortingForAscendingandDescendingOrderNumaber(
			List<WebElement> actNumber, WebElement clickAsceButton) throws InterruptedException {
		ArrayList<String> obtainedList1 = new ArrayList<>();
		ArrayList<String> sortedList1 = new ArrayList<>();
		// ArrayList<WebElement> rows1 =
		// (ArrayList<WebElement>)getDriver().findElements(By.xpath("//*[@class='flex-table__row
		// flex-table__row']/div[3]"));
		System.out.println(actNumber.size());
		Thread.sleep(3000);
		for (WebElement roww : actNumber) {
			obtainedList1.add(roww.getText());
			System.out.println("Before Sorting " + roww.getText() + " is Verifyed");
		}
		Thread.sleep(5000);
		clickAsceButton.click();
		// rows1 = (ArrayList<WebElement>)
		// getDriver().findElements(By.xpath("//*[@class='flex-table__row
		// flex-table__row']/div[3]"));
		Thread.sleep(5000);
		for (WebElement row : actNumber) {
			sortedList1.add(row.getText());
			// System.out.println(row.getText());
			System.out.println("After Sorting " + row.getText() + " is Verifyed");
		}
		if (obtainedList1.equals(sortedList1)) {
		} else {
			Collections.sort(obtainedList1);
			if (obtainedList1.equals(sortedList1)) {
				// Utils.Vaildation_Message("After Sorting "+sortedList1+"_is_Verifyed");
				System.out.print("Final Sorting " + obtainedList1 + sortedList1 + "And After Sorting is Verifyed");
			} else {
				System.out.println("Not Sorted");
				Assert.fail("Values Not Sorted");
			}
		}
	}

	public static void switchTowindowByIndex(int tabNum) throws Throwable {
		ArrayList<String> tabs = new ArrayList<>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(tabNum));
	}

	public static String getDate() {
		SimpleDateFormat f = new SimpleDateFormat("yyMMddss");

		return f.format(new Date()) + 0;
	}

	public static void creteFile(String path, String fileName) {

		try {
			File myObj = new File(path + fileName);
			if (myObj.createNewFile()) {
				System.out.println("File created: " + myObj.getName());
			} else {
				System.out.println("File already exists.");
			}
		} catch (IOException e) {
			System.out.println("An error occurred.");
			e.printStackTrace();
		}
	}

	public static FileWriter writeToFile(String path, String filename) {
		FileWriter myWriter = null;
		try {
			myWriter = new FileWriter(path + filename);

			System.out.println("Successfully wrote to the file.");
		} catch (IOException e) {
			System.out.println("An error occurred.");
			e.printStackTrace();
		}
		return myWriter;
	}

	public static void uploadFile(String pathWithFile) {

		Robot robot = null;

		try {
			robot = new Robot();
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		StringSelection ss = new StringSelection(getCurrDir() + pathWithFile);
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
		robot.delay(250);
		// robot.keyPress(KeyEvent.VK_ENTER);
		// robot.keyRelease(KeyEvent.VK_ENTER);
		robot.keyPress(KeyEvent.VK_CONTROL);
		robot.delay(1000);
		robot.keyPress(KeyEvent.VK_V);
		robot.delay(1000);
		robot.keyRelease(KeyEvent.VK_V);
		robot.keyRelease(KeyEvent.VK_CONTROL);
		robot.delay(1000);
		robot.keyPress(KeyEvent.VK_ENTER);
		robot.keyRelease(KeyEvent.VK_ENTER);
		robot.delay(2000);
	}

	public static String getCurrDir() {

		return System.getProperty("user.dir");
	}

	public static void sleepTime() throws InterruptedException {

		Thread.sleep(10000);
	}

	public static boolean isElementEnabled(WebElement element) {
		try {
			WebDriverWait wait = new WebDriverWait(driver, 5);
			wait.until(ExpectedConditions.visibilityOf(element));
			return element.isEnabled();
		} catch (org.openqa.selenium.NoSuchElementException | org.openqa.selenium.StaleElementReferenceException
				| org.openqa.selenium.TimeoutException e) {
			return false;
		}
	}

	public String getCurrentUrl() {
		return driver.getCurrentUrl();
	}

	public static void clickOnElementAndWait(WebDriver driver, WebElement element) {
		WebDriverWait wait = new WebDriverWait(driver, 20);

		wait.until(ExpectedConditions.elementToBeClickable(element));

		element.click();

		// Print the text of the element
		System.out.println("Element text: " + element.getText());
	}

	public static void explicit_locate(WebElement element) {
		if (driver != null) {
			WebDriverWait wait = new WebDriverWait(driver, 15);
			wait.until(ExpectedConditions.visibilityOf(element));
		}

	}

}
