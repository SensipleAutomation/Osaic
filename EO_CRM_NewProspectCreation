package webpages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.Random;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;

import utility.TestUtils;

public class EO_CRM_NewProspectCreation {

	WebDriver driver;
	WebDriverWait wait;
	JavascriptExecutor js;
	Actions act;

	public EO_CRM_NewProspectCreation(WebDriver driver) {
		this.driver = driver;
		this.wait = new WebDriverWait(driver, 10);
		PageFactory.initElements(driver, this);

		js = (JavascriptExecutor) driver;
		act = new Actions(driver);
	}

	@FindBy(xpath = "//input[@name='username']")
	private WebElement Mail;

	@FindBy(xpath = "//input[@id='password']")
	private WebElement Password;

	@FindBy(xpath = "//input[@id='Login']")
	private WebElement LogButton;

	@FindBy(xpath = "//div[@id='usernamegroup']//preceding-sibling::div[@id='error']")
	private WebElement ErrorDisplayed;

	@FindBy(xpath = "//div[contains(@class,'slds-global-header__item')]//parent::div[@class='slds-global-header__logo']")
	private WebElement DashboradElement;

	@FindBy(xpath = "//*[contains(@class, 'appName slds-context-bar__label-action slds-context-bar__app-name')]")
	private WebElement BusinessHeader;

	@FindBy(xpath = "//div[@class='slds-icon-waffle']")
	private WebElement BusinessSelect;

	@FindBy(xpath = "//input[@placeholder='Search apps and items...']")
	private WebElement BusiSearch;

	@FindBy(xpath = "//span[@title='Contact Name']")
	private WebElement busiClick;

	@FindBy(xpath = "//div[@class='oneConsoleNav navexConsoleNav']//following::div[contains(@class,'selectedListItem ')]")
	private WebElement LeadsHead;

	@FindBy(xpath = "//div[@class='slds-context-bar__icon-action']")
	private WebElement LeadArrow;

	@FindBy(xpath = "//div[@class='slds-context-bar__icon-action']//following::a[@data-label='Leads']")
	private WebElement LeadSelect;

	@FindBy(xpath = "//div[text()='Add to Campaign']//preceding::a[@class='forceActionLink']")
	private WebElement NewButton;

	@FindBy(xpath = "//div[@class='slds-modal__header']")
	private WebElement NewLeadHeader;

	@FindBy(xpath = "//input[@placeholder='First Name']")
	private WebElement Firstname;

	@FindBy(xpath = "//input[@placeholder='Last Name']")
	private WebElement Lastname;

	@FindBy(xpath = "//label[text()='FINRA CRD']")
	private WebElement ScrollDOB;

	@FindBy(xpath = "//input[@name='CRD__c']")
	private WebElement FINRACRD;

	@FindBy(xpath = "//input[@name='Date_of_Birth__c']")
	private WebElement DOBInput;

	@FindBy(xpath = "(//span[text()='BUSINESS PROFILE'])[last()]")
	private WebElement ScrollBusiness;

	@FindBy(xpath = "//input[@name='Business_Name_DBA__c']")
	private WebElement BusinessName;

	@FindBy(xpath = "//input[@name='Company']")
	private WebElement BranchName;

	@FindBy(xpath = "//span[text()='Recruiting Team']")
	private WebElement recrutingTeam;

	@FindBy(xpath = "(//input)[last()-46]")
	private WebElement ExtRecNam;

	@FindBy(xpath = "(//input)[last()-42]")
	private WebElement IntRecNam;

	@FindBy(xpath = "//label[text()='Assigned Internal Recruiter Name']//following::ul//following::span[text()='Mounika Golla BO']")
	private WebElement IntRecNamSel;

	@FindBy(xpath = "(//label[text()='Assigned External Recruiter Name']//following::ul//following::span[text()='Mounika Golla BO'])[1]")
	private WebElement ExtRecNamSel;

	@FindBy(xpath = "//span[text()='Assigned Wealth Management Firm']")
	private WebElement wealthManagementTap;

	@FindBy(xpath = "(//label[text()='Assigned Wealth Management Firm'])//following::button[1]")
	private WebElement wealthDropdown;

	@FindBy(xpath = "//label[text()='Assigned Wealth Management Firm']//following-sibling::div")
	private WebElement AWMFirmDrop;

	@FindBy(xpath = "//span[text()='Osaic']")
	private WebElement dropOsaic;

	@FindBy(xpath = "//input[@name='MobilePhone']")
	private WebElement PerMobNum;

	@FindBy(xpath = "//input[@name='Email']")
	private WebElement PerEmail;

	@FindBy(xpath = "//label[text()='Recruiting Lead Source']//following-sibling::div")
	private WebElement RecleSource;

	@FindBy(xpath = "(//span[@class='slds-media__body']//following::span[text()='Marketing'])[1]")
	private WebElement LeadMarket;

//	@FindBy(xpath = "//label[text()='Current Type of Practice']")
//	private WebElement CurPraTyp;

	@FindBy(xpath = "//label[text()='Current Type of Practice']//following-sibling::div")
	private WebElement CurPraDrop;

	@FindBy(xpath = "//span[text()='Solo']")
	private WebElement SoloSel;

	@FindBy(xpath = "//button[text()='Save']")
	private WebElement saveButton;

	@FindBy(xpath = "//span[text()='Account Name']")
	private WebElement beforeConvert;

	@FindBy(xpath = "//button[text()='Convert Lead']")
	private WebElement ConveLeButton;

	@FindBy(xpath = "(//div[@role='alertdialog'])[last()]")
	private WebElement NewLeadToast;

	@FindBy(xpath = "//span[text()='Lead Converted']")
	private WebElement leadConvertToast;

	@FindBy(xpath = "//slot[contains(@class,'slds-page-header__title slds')]")
	private WebElement LeadHeader;

	@FindBy(xpath = "(//h2[contains(@class, 'slds-p-top_large slds-p-horizontal_medium')])[last()]")
	private WebElement convertHeader;

	@FindBy(xpath = "//button[text()='Convert']")
	private WebElement finalConvert;

	@FindBy(xpath = "//h2[text()='Your lead has been converted']")
	private WebElement ConvertMessage;

//	@FindBy(xpath = "//a[text()='7654321']")
//	private WebElement accOpen;
//	@FindBy(xpath = "(//div[contains(@class, 'test-id__section-content ')])[2]")
//	private WebElement printProfile;

	@FindBy(xpath = "//button[@aria-label='Search']")
	private WebElement SearchBar;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()]")
	private WebElement inviteButton;

	@FindBy(xpath = "//span[contains(text(), 'The WelcomeHub Invitation Email will')]")
	private WebElement yesButtonHeader;

	@FindBy(xpath = "//p[text()='The invite to the Welcome Hub has been sent to your prospect.']")
	private WebElement confirmationInvite;

	@FindBy(xpath = "//button[@title='Close this window']")
	private WebElement invitedClose;

	@FindBy(xpath = "//h4[text()='Confirmation']")
	private WebElement confirmToaster;

	@FindBy(xpath = "//button[contains(@class,'publisherCancelButton')]")
	private WebElement close;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()-3]")
	private WebElement DeleteButton;

	@FindBy(xpath = "//h2[text()='Delete Opportunity']")
	private WebElement deleteConfirmHeader;

	@FindBy(xpath = "//span[text()='Delete']")
	private WebElement deletFin;

	@FindBy(xpath = "//div[contains(@id, 'toastDescription')]")
	private WebElement DeleteToast;

	@FindBy(xpath = "//button[contains(@class, 'slds-button slds-button_neutral search-button slds-truncate')]")
	private WebElement searchBar;

	@FindBy(xpath = "(//div[@class='slds-truncate instant-result-item__content'])[2]")
	private WebElement searchSelect;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()]")
	private WebElement downClick;

	@FindBy(xpath = "//span[text()='Delete']")
	private WebElement delBut;

	@FindBy(xpath = "//button[@title='Delete']")
	private WebElement deleteFinal;

	@FindBy(xpath = "//span[@class='toastMessage slds-text-heading--small forceActionsText']")
	private WebElement finaToast;

	@FindBy(xpath = "//span[@class='uiImage']")
	private WebElement LogIm;

	@FindBy(xpath = "//a[text()='Log Out']")
	private WebElement logout;

	@FindBy(xpath = "//div[text()='Complete this field.']")
	private WebElement LasErr;

	@FindBy(xpath = "//a[text()='AutoDemoTest Deat']")
	private WebElement contact;

	@FindBy(xpath = "//a[text()='8654321']")
	private WebElement oppourtunity;

	@FindBy(xpath = "(//label[text()='Contact'])//following::input[1]")
	private WebElement editContact;

	@FindBy(xpath = "(//input[@placeholder='Search Contacts...'])[2]")
	private WebElement contactSearch;

	@FindBy(xpath = "//span[text()='AutoDemoTest Deat']")
	private WebElement selectContact;

	@FindBy(xpath = "//*[text()='TesAuto']")
	private WebElement scrollContact;

	@FindBy(xpath = "(//div[contains(@class, 'vertical_none')]//span[text()='LEAD INFORMATION'])[last()]")
	private WebElement scrExt;

	@FindBy(xpath = "//label[text()='Number of Advisory Accounts']")
	private WebElement scrDis;

	@FindBy(xpath = "//button[@aria-label='Channel - Current Selection: --None--']")
	private WebElement channeldrop;

	@FindBy(xpath = "//span[text()='Direct']")
	private WebElement chaSel;

	@FindBy(xpath = "//input[@name='Number_of_Branch_Offices__c']")
	private WebElement NBO;

	@FindBy(xpath = "//input[@name='Number_of_Producing_Staff__c']")
	private WebElement NPS;

	@FindBy(xpath = "//input[@name='Number_of_Non_Producing_Staff__c']")
	private WebElement NNP;

	@FindBy(xpath = "//button[@aria-label='Desired Supervision - Current Selection: --None--']")
	private WebElement dsDrop;

	@FindBy(xpath = "//span[text()='Home Office Supervision']")
	private WebElement dsSelect;

	@FindBy(xpath = "(//div[@data-value='NFS'])[2]")
	private WebElement NFS;

	@FindBy(xpath = "(//button[@title='Move selection to Chosen'])[4]")
	private WebElement push;

	@FindBy(xpath = "//button[text()='Save']")
	private WebElement saveforInvite;

	@FindBy(xpath = "//label[text()='Current Custodians Other Details']")
	private WebElement ScrolTOval;

	@FindBy(xpath = "//label[text()='Desired Affiliation Model']")
	private WebElement ScrolThome;

	@FindBy(xpath = "//a[text()='AutoDemoTest Deat']//preceding::th[@class='slds-cell-edit cellContainer']")
	private WebElement deatCase;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()]")
	private WebElement delDown;

	@FindBy(xpath = "//span[text()='Delete']")
	private WebElement caseDelete;

	@FindBy(xpath = "//a[@id='Case']")
	private WebElement caseClick;

	@FindBy(xpath = "(//div[@data-target-selection-name='sfdc:RecordField.Opportunity.External_Id__c']//following::lightning-formatted-text[@data-output-element-id='output-field'])[1]")
	private WebElement extID;

	public synchronized EO_CRM_NewProspectCreation loginToCRM(String username, String password) {

		Assert.assertTrue(isElementPresent(Mail) && isElementPresent(Password) && isElementPresent(LogButton),
				"One or more required fields are not present");

		Mail.sendKeys(username);
		Password.sendKeys(password);
		LogButton.click();

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation firstLast(String Firstnam, String lastname) {

		Assert.assertTrue(isElementPresent(Firstname), "First name field is not present");
		Assert.assertTrue(isElementPresent(Lastname), "Last name field is not present");

		Firstname.sendKeys(Firstnam);
		Lastname.sendKeys(lastname);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation finra(String Finra) {

		Assert.assertTrue(isElementPresent(FINRACRD), "Finra field is not present");

		FINRACRD.sendKeys(Finra);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation businessNameDBA(String Name) {
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", BusinessName);
		Assert.assertTrue(isElementPresent(BusinessName), "Business name field is not present");

		BusinessName.sendKeys(Name);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation businessBranchName(String Branch) {
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", BranchName);
		Assert.assertTrue(isElementPresent(BranchName), "Branch name field is not present");

		BranchName.sendKeys(Branch);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation dob(String dob) {

		Assert.assertTrue(isElementPresent(DOBInput), "DOB field is not present");

		DOBInput.sendKeys(dob);

		return this;
	}

	private boolean isElementPresent(WebElement element) {
		try {
			return element.isDisplayed();
		} catch (NoSuchElementException e) {
			return false;
		}
	}

	public synchronized EO_CRM_NewProspectCreation mobEmail() {
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(PerMobNum), "Personal Mobile Number field is not present");
		Assert.assertTrue(isElementPresent(PerEmail), "Personal Email field is not present");

		WebElement mobileNumberInput = PerMobNum;
		mobileNumberInput.sendKeys(generateRandomMobileNumber());

		WebElement emailInput = PerEmail;
		emailInput.sendKeys(generateRandomEmailAddress());

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation last(String lastname) {
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(searchBar), "Search bar field is not present");

		searchBar.sendKeys(lastname);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation values(String value) {
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(NBO), "NBO field is not present");
		Assert.assertTrue(isElementPresent(NPS), "NPS field is not present");
		Assert.assertTrue(isElementPresent(NNP), "NNP field is not present");

		NBO.sendKeys(value);
		TestUtils.sleep(1000);
		NPS.sendKeys(value);
		TestUtils.sleep(1000);
		NNP.sendKeys(value);

		return this;
	}

	public void dashboard() {
		TestUtils.sleep(1000);
		if (DashboradElement.isDisplayed()) {
			System.out.println("User is on CRM HomePage");
		} else {
			System.out.println("Unable to login to server");
		}

	}

	public void BusinessDevolpment() {
		WebElement BusiHead = BusinessHeader;

		String BusiHeadText = BusiHead.getText();

		String expectedText = "Business Development";

		if (BusiHeadText.equals(expectedText)) {

			System.out.println("Element text is as expected: " + BusiHeadText);
		} else {

			TestUtils.sleep(3000);
			BusinessSelect.click();
			BusiSearch.sendKeys("Business");
			act.sendKeys(Keys.ENTER).perform();
			System.out.println("Element text Selected : Business Development");
			TestUtils.sleep(2000);
		}
	}

	public void Lead() {
		WebElement LeadHead = LeadsHead;

		String expectedLead = LeadHead.getText();

		String expectedHead = "Leads";

		if (expectedLead.equals(expectedHead)) {
			LeadHead.click();
			System.out.println("Element text is as expected: " + expectedLead);
		} else {
			TestUtils.sleep(1000);
			LeadArrow.click();
			TestUtils.sleep(1000);
			LeadSelect.click();
			System.out.println("Element text Selected : Leads");

		}
	}

	public void newButton() {
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(NewButton), "New button is not present");
		NewButton.click();
	}

	public void NewHead() {
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(NewLeadHeader), "New Header is not present");
	}

	public void BusinessProfile() {
		WebElement element = ScrollBusiness;
		js.executeScript("arguments[0].scrollIntoView();", element);
		Assert.assertTrue(isElementPresent(ScrollBusiness), "Business Profile Header is not present");
	}

	public void Assigne() {
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", recrutingTeam);
		Assert.assertTrue(isElementPresent(recrutingTeam), "Assign is not present");
	}

	public void External() {
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", ExtRecNam);
		ExtRecNam.click();
		ExtRecNamSel.click();
		TestUtils.sleep(1000);
	}

	public void Internal() {
		Assert.assertTrue(isElementPresent(IntRecNam), "Internal Receiver Name is not present");
		IntRecNam.click();
		IntRecNamSel.click();
		TestUtils.sleep(1000);
	}

//	public void wealth() {
//		wea
//		AWMFirmDrop.click();
//		dropOsaic.click();
//		TestUtils.sleep(1000);
//	}

	public void recLead() {
		WebElement element = RecleSource;
		js.executeScript("arguments[0].scrollIntoView();", element);
		RecleSource.click();
		LeadMarket.click();
		TestUtils.sleep(1000);
	}

	public void curPrac() {
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", CurPraDrop);
		Assert.assertTrue(isElementPresent(CurPraDrop), "Current Practise is not present");
		CurPraDrop.click();
		SoloSel.click();
		TestUtils.sleep(1000);
	}

	public void finSave() {
		saveButton.click();
	}

	public void toaster() {
		wait.until(ExpectedConditions.visibilityOf(NewLeadToast));
		Assert.assertTrue(isElementPresent(NewLeadToast), "Toaster is not present");
	}

	public void leadToaster() {
		wait.until(ExpectedConditions.visibilityOf(leadConvertToast));
		Assert.assertTrue(isElementPresent(leadConvertToast), "Toaster is not present");
	}

	public void ClickLead() {
		wait.until(ExpectedConditions.visibilityOf(ConveLeButton));
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(ConveLeButton), "ConveLeButton is not present");
		ConveLeButton.click();
	}

	public void convertHead() {
		wait.until(ExpectedConditions.visibilityOf(convertHeader));
		Assert.assertTrue(isElementPresent(convertHeader), "Convert Header is not present");
	}

	public void finaConvert() {
		wait.until(ExpectedConditions.visibilityOf(beforeConvert));
		Assert.assertTrue(isElementPresent(beforeConvert), "beforeConvert is not present");
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(finalConvert), "ConveLeButton is not present");
		finalConvert.click();
	}

	public void FinalHeader() {
		TestUtils.explicit_locate(ConvertMessage);
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(ConvertMessage), "Convert Message is not present");
		TestUtils.sleep(2000);
	}

//	public void openacc() {
//		accOpen.click();
//	}

	public void inviteBut() {
		TestUtils.sleep(3000);
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(inviteButton), "Invite Button is not present");
	}

	public void invite() {
		Assert.assertTrue(isElementPresent(inviteButton), "Invite Button is not present");
		inviteButton.click();
		TestUtils.explicit_locate(yesButtonHeader);
		Assert.assertTrue(isElementPresent(yesButtonHeader), "Button Yes on Invite is not present");
		act.sendKeys(Keys.ENTER).perform();
		TestUtils.sleep(2000);
		TestUtils.explicit_locate(confirmationInvite);
		Assert.assertTrue(isElementPresent(confirmationInvite), "confirmationInvite is not present");
		invitedClose.click();
		TestUtils.sleep(2000);
		driver.navigate().refresh();
		TestUtils.sleep(2000);
	}

	public void confirmation() {
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(confirmToaster), "Confirmation Toaster is not present");
		Assert.assertTrue(confirmToaster.isDisplayed(), "Confirmation Toaster is not displayed");
	}

	public void close() {
		TestUtils.explicit_locate(close);
		Assert.assertTrue(isElementPresent(close), "Close button is not present");
		close.click();
	}

	public void DeleteProspect() {
		TestUtils.sleep(3000);
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(1000);

		if (isElementPresent(DeleteButton) && isElementPresent(deleteConfirmHeader)) {
			DeleteButton.click();
			TestUtils.sleep(2000);
			Assert.assertTrue(deleteConfirmHeader.isDisplayed(), "Delete Confirmation is not present");
			TestUtils.sleep(2000);
			deletFin.click();
			TestUtils.sleep(2000);
		}
	}

	public void Select() {
		TestUtils.sleep(4000);

		if (isElementPresent(searchBar)) {
			searchBar.click();
			TestUtils.sleep(2000);

			if (isElementPresent(searchSelect) && isElementPresent(downClick) && isElementPresent(delBut)
					&& isElementPresent(deleteFinal) && isElementPresent(finaToast) && isElementPresent(LogIm)
					&& isElementPresent(logout)) {
				act.sendKeys(searchBar, "Deat").perform();
				TestUtils.sleep(2000);

				searchSelect.click();
				TestUtils.sleep(3000);
				downClick.click();
				TestUtils.sleep(1000);
				delBut.click();
				TestUtils.sleep(2000);
				deleteFinal.click();
				TestUtils.sleep(2000);

				if (isElementPresent(finaToast)) {
					Assert.assertTrue(finaToast.isDisplayed(), "Delete Toaster is not present");
					TestUtils.sleep(2000);
					LogIm.click();
					TestUtils.sleep(2000);
					logout.click();
				}
			}
		}
	}

	public void contactTab() throws AWTException {
		act.contextClick(contact).perform();
		TestUtils.sleep(2000);

		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_DOWN);
		r.keyRelease(KeyEvent.VK_DOWN);
		TestUtils.sleep(1000);
		r.keyPress(KeyEvent.VK_ENTER);
		r.keyRelease(KeyEvent.VK_ENTER);
		TestUtils.sleep(2000);

	}

	public void oppTab() {
		TestUtils.explicit_locate(oppourtunity);

		if (isElementPresent(oppourtunity)) {
			TestUtils.sleep(2000);
			oppourtunity.click();
		}
	}

	public void contactEdit() {
		TestUtils.sleep(5000);
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", wealthManagementTap);
		act.doubleClick(wealthManagementTap).perform();
		TestUtils.explicit_locate(wealthDropdown);
		Assert.assertTrue(wealthDropdown.isDisplayed(), "Wealth dropdown is not present");
		wealthDropdown.click();
		dropOsaic.click();
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", editContact);
		TestUtils.sleep(1000);
		contactSearch.click();
		TestUtils.sleep(1000);
		selectContact.click();
	}

	public void channel() {
		TestUtils.sleep(2000);
		WebElement element = scrDis;
		js.executeScript("arguments[0].scrollIntoView();", element);
		channeldrop.click();
		TestUtils.sleep(1000);
		if (isElementPresent(chaSel)) {
			chaSel.click();
		}

	}

	public void homeSelect() {
		WebElement element1 = ScrolThome;
		js.executeScript("arguments[0].scrollIntoView();", element1);
		TestUtils.sleep(1000);
		if (isElementPresent(dsDrop) && isElementPresent(NFS) && isElementPresent(push)
				&& isElementPresent(saveforInvite)) {
			dsDrop.click();
			dsSelect.click();
			TestUtils.sleep(1000);
			NFS.click();
			push.click();
			saveforInvite.click();
			TestUtils.sleep(2000);
		}
	}

	public void cases() {
		TestUtils.sleep(3000);

		if (isElementPresent(BusinessSelect) && isElementPresent(BusiSearch) && isElementPresent(deatCase)
				&& isElementPresent(delDown) && isElementPresent(caseDelete) && isElementPresent(deleteFinal)) {
			BusinessSelect.click();
			BusiSearch.sendKeys("cases");
			TestUtils.sleep(1000);
			act.sendKeys(Keys.ENTER).perform();
			TestUtils.sleep(1000);
			act.sendKeys(Keys.ESCAPE).perform();
			TestUtils.sleep(1000);
			deatCase.click();
			TestUtils.sleep(3000);
			delDown.click();
			caseDelete.click();
			TestUtils.sleep(2000);
			deleteFinal.click();
			TestUtils.sleep(3000);
		}
	}

	public static String generateRandomMobileNumber() {
		Random random = new Random();

		StringBuilder mobileNumber = new StringBuilder("4");
		for (int i = 0; i < 9; i++) {
			mobileNumber.append(random.nextInt(10));
		}
		return mobileNumber.toString();
	}

	public static String generateRandomEmailAddress() {
		Random random = new Random();

		String username = "Autmatest" + random.nextInt(1000);
		String domain = "@test.com";
		return username + domain;
	}

	public void ext() {
		TestUtils.sleep(6000);
		TestUtils.explicit_locate(scrExt);
		js.executeScript("window.scrollBy(0, 650);");
		TestUtils.sleep(1500);
		if (extID.isDisplayed()) {
			String text = extID.getText();
			System.out.println("External Id:" + text);
		} else {

			driver.navigate().refresh();
			js.executeScript("window.scrollBy(0, 650);");

			if (extID.isDisplayed()) {
				String text = extID.getText();
				System.out.println("External Id:" + text);
			} else {

				throw new RuntimeException("External ID is not generated. Stopping automation testing.");
			}
		}

//		if (extID.isDisplayed()) {
//			String text = extID.getText();
//			System.out.println("External Id:" + text);
//
//		} else {
//			driver.navigate().refresh();
//			if (extID.isDisplayed()) {
//				String text = extID.getText();
//				System.out.println("External Id:" + text);
//			throw new RuntimeException("External ID is not generated. Stopping automation testing.");
//		}
	}

}
