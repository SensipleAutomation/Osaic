package webpages;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.util.Random;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.testng.Assert;

import utility.TestUtils;

public class EO_CRM_NewProspectCreation {

	WebDriver driver;

	public EO_CRM_NewProspectCreation(WebDriver driver) {
		this.driver = driver;
		PageFactory.initElements(driver, this);

	}

	@FindBy(xpath = "//input[@name='username']")
	private WebElement Mail;

	@FindBy(xpath = "//input[@id='password']")
	private WebElement Password;

	@FindBy(xpath = "//input[@id='Login']")
	private WebElement LogButton;

	@FindBy(xpath = "//div[@id='usernamegroup']//preceding-sibling::div[@id='error']")
	private WebElement ErrorDisplayed;

	@FindBy(xpath = "//div[contains(@class,'slds-global-header__item')]//parent::div[@class='slds-global-header__logo']")
	private WebElement DashboradElement;

	@FindBy(xpath = "//*[contains(@class, 'appName slds-context-bar__label-action slds-context-bar__app-name')]")
	private WebElement BusinessHeader;

	@FindBy(xpath = "//div[@class='slds-icon-waffle']")
	private WebElement BusinessSelect;

	@FindBy(xpath = "//input[@placeholder='Search apps and items...']")
	private WebElement BusiSearch;

	@FindBy(xpath = "//span[@title='Contact Name']")
	private WebElement busiClick;

	@FindBy(xpath = "//div[@class='oneConsoleNav navexConsoleNav']//following::div[contains(@class,'selectedListItem ')]")
	private WebElement LeadsHead;

	@FindBy(xpath = "//div[@class='slds-context-bar__icon-action']")
	private WebElement LeadArrow;

	@FindBy(xpath = "//div[@class='slds-context-bar__icon-action']//following::a[@data-label='Leads']")
	private WebElement LeadSelect;

	@FindBy(xpath = "//div[text()='Add to Campaign']//preceding::a[@class='forceActionLink']")
	private WebElement NewButton;

	@FindBy(xpath = "//div[@class='slds-modal__header']")
	private WebElement NewLeadHeader;

	@FindBy(xpath = "//input[@placeholder='First Name']")
	private WebElement Firstname;

	@FindBy(xpath = "//input[@placeholder='Last Name']")
	private WebElement Lastname;

	@FindBy(xpath = "//label[text()='FINRA CRD']")
	private WebElement ScrollDOB;

	@FindBy(xpath = "//input[@name='CRD__c']")
	private WebElement FINRACRD;

	@FindBy(xpath = "//input[@name='Date_of_Birth__c']")
	private WebElement DOBInput;

	@FindBy(xpath = "//span[text()='BUSINESS PROFILE']")
	private WebElement ScrollBusiness;

	@FindBy(xpath = "//input[@name='Business_Name_DBA__c']")
	private WebElement BusinessName;

	@FindBy(xpath = "//input[@name='Company']")
	private WebElement BranchName;

	@FindBy(xpath = "//span[text()='ASSIGNED TO']")
	private WebElement scrollAssign;

	@FindBy(xpath = "(//input)[last()-45]")
	private WebElement ExtRecNam;

	@FindBy(xpath = "(//input)[last()-43]")
	private WebElement IntRecNam;

	@FindBy(xpath = "//label[text()='Assigned Internal Recruiter Name']//following::ul//following::span[text()='Mounika Golla BO']")
	private WebElement IntRecNamSel;

	@FindBy(xpath = "(//label[text()='Assigned External Recruiter Name']//following::ul//following::span[text()='Mounika Golla BO'])[1]")
	private WebElement ExtRecNamSel;

	@FindBy(xpath = "//label[text()='Assigned Wealth Management Firm']//following-sibling::div")
	private WebElement AWMFirmDrop;

	@FindBy(xpath = "//span[text()='Osaic']")
	private WebElement dropOsaic;

	@FindBy(xpath = "//input[@name='MobilePhone']")
	private WebElement PerMobNum;

	@FindBy(xpath = "//input[@name='Email']")
	private WebElement PerEmail;

	@FindBy(xpath = "//label[text()='Recruiting Lead Source']//following-sibling::div")
	private WebElement RecleSource;

	@FindBy(xpath = "(//span[@class='slds-media__body']//following::span[text()='Marketing'])[1]")
	private WebElement LeadMarket;

//	@FindBy(xpath = "//label[text()='Current Type of Practice']")
//	private WebElement CurPraTyp;

	@FindBy(xpath = "//label[text()='Current Type of Practice']//following-sibling::div")
	private WebElement CurPraDrop;

	@FindBy(xpath = "//span[text()='Solo']")
	private WebElement SoloSel;

	@FindBy(xpath = "//button[text()='Save']")
	private WebElement saveButton;

	@FindBy(xpath = "//button[text()='Convert Lead']")
	private WebElement ConveLeButton;

	@FindBy(xpath = "//div[@role='alertdialog']")
	private WebElement NewLeadToast;

	@FindBy(xpath = "//slot[contains(@class,'slds-page-header__title slds')]")
	private WebElement LeadHeader;

	@FindBy(xpath = "//h2[contains(@class, 'slds-p-top_large slds-p-horizontal_medium')]")
	private WebElement convertHeader;

	@FindBy(xpath = "//button[text()='Convert']")
	private WebElement finalConvert;

	@FindBy(xpath = "//h2[text()='Your lead has been converted']")
	private WebElement ConvertMessage;

	@FindBy(xpath = "//a[text()='65432']")
	private WebElement accOpen;
//	@FindBy(xpath = "(//div[contains(@class, 'test-id__section-content ')])[2]")
//	private WebElement printProfile;

	@FindBy(xpath = "//button[@aria-label='Search']")
	private WebElement SearchBar;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()]")
	private WebElement inviteButton;
	
	@FindBy(xpath = "//button[text()='Yes']")
	private WebElement yesButton;
	
	@FindBy(xpath = "//p[text()='The invite to the Welcome Hub has been sent to your prospect.']")
	private WebElement confirmationInvite;
	
	@FindBy(xpath = "//button[@title='Close this window']")
	private WebElement invitedClose;

	@FindBy(xpath = "//h4[text()='Confirmation']")
	private WebElement confirmToaster;

	@FindBy(xpath = "//button[contains(@class,'publisherCancelButton')]")
	private WebElement close;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()-3]")
	private WebElement DeleteButton;

	@FindBy(xpath = "//h2[text()='Delete Opportunity']")
	private WebElement deleteConfirmHeader;

	@FindBy(xpath = "//span[text()='Delete']")
	private WebElement deletFin;

	@FindBy(xpath = "//div[contains(@id, 'toastDescription')]")
	private WebElement DeleteToast;

	@FindBy(xpath = "//button[contains(@class, 'slds-button slds-button_neutral search-button slds-truncate')]")
	private WebElement searchBar;

	@FindBy(xpath = "(//div[@class='slds-truncate instant-result-item__content'])[2]")
	private WebElement searchSelect;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()]")
	private WebElement downClick;

	@FindBy(xpath = "//span[text()='Delete']")
	private WebElement delBut;

	@FindBy(xpath = "//button[@title='Delete']")
	private WebElement deleteFinal;

	@FindBy(xpath = "//span[@class='toastMessage slds-text-heading--small forceActionsText']")
	private WebElement finaToast;

	@FindBy(xpath = "//span[@class='uiImage']")
	private WebElement LogIm;

	@FindBy(xpath = "//a[text()='Log Out']")
	private WebElement logout;

	@FindBy(xpath = "//div[text()='Complete this field.']")
	private WebElement LasErr;

	@FindBy(xpath = "//a[text()='AutoDemoTest Deat']")
	private WebElement contact;

	@FindBy(xpath = "//a[text()='654321']")
	private WebElement oppourtunity;

	@FindBy(xpath = "(//div[contains(@class, 'horizontal_small')]//span[text()='Contact'])[last()]")
	private WebElement editContact;

	@FindBy(xpath = "(//input[@placeholder='Search Contacts...'])[2]")
	private WebElement contactSearch;

	@FindBy(xpath = "//span[text()='AutoDemoTest Deat']")
	private WebElement selectContact;

	@FindBy(xpath = "//*[text()='TesAuto']")
	private WebElement scrollContact;

	@FindBy(xpath = "(//div[contains(@class, 'vertical_none')]//span[text()='LEAD INFORMATION'])[last()]")
	private WebElement scrExt;

	@FindBy(xpath = "//label[text()='Number of Advisory Accounts']")
	private WebElement scrDis;

	@FindBy(xpath = "//button[@aria-label='Channel - Current Selection: --None--']")
	private WebElement channeldrop;

	@FindBy(xpath = "//span[text()='Direct']")
	private WebElement chaSel;

	@FindBy(xpath = "//input[@name='Number_of_Branch_Offices__c']")
	private WebElement NBO;

	@FindBy(xpath = "//input[@name='Number_of_Producing_Staff__c']")
	private WebElement NPS;

	@FindBy(xpath = "//input[@name='Number_of_Non_Producing_Staff__c']")
	private WebElement NNP;

	@FindBy(xpath = "//button[@aria-label='Desired Supervision - Current Selection: --None--']")
	private WebElement dsDrop;

	@FindBy(xpath = "//span[text()='Home Office Supervision']")
	private WebElement dsSelect;

	@FindBy(xpath = "(//div[@data-value='NFS'])[2]")
	private WebElement NFS;

	@FindBy(xpath = "(//button[@title='Move selection to Chosen'])[4]")
	private WebElement push;

	@FindBy(xpath = "//button[text()='Save']")
	private WebElement saveforInvite;

	@FindBy(xpath = "//label[text()='Current Custodians Other Details']")
	private WebElement ScrolTOval;

	@FindBy(xpath = "//label[text()='Desired Affiliation Model']")
	private WebElement ScrolThome;

	@FindBy(xpath = "//a[text()='AutoDemoTest Deat']//preceding::th[@class='slds-cell-edit cellContainer']")
	private WebElement deatCase;

	@FindBy(xpath = "(//ul[@class='slds-button-group-list']/li)[last()]")
	private WebElement delDown;

	@FindBy(xpath = "//span[text()='Delete']")
	private WebElement caseDelete;

	@FindBy(xpath = "//a[@id='Case']")
	private WebElement caseClick;

	@FindBy(xpath = "(//div[@data-target-selection-name='sfdc:RecordField.Opportunity.External_Id__c']//following::lightning-formatted-text[@data-output-element-id='output-field'])[1]")
	private WebElement extID;

	public synchronized EO_CRM_NewProspectCreation loginToCRM(String username, String password) {
		Mail.sendKeys(username);
		Password.sendKeys(password);
		LogButton.click();
		return this;
	}

	public synchronized EO_CRM_NewProspectCreation firstLast(String Firstnam, String lastname) {
		TestUtils.sleep(2000);
		Firstname.sendKeys(Firstnam);
		Lastname.sendKeys(lastname);
		return this;
	}

	public synchronized EO_CRM_NewProspectCreation finra(String Finra) {
		TestUtils.sleep(2000);
		FINRACRD.sendKeys(Finra);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation BusiNB(String Name, String Branch) {

		BusinessName.sendKeys(Name);
		BranchName.sendKeys(Branch);
		return this;
	}

	public synchronized EO_CRM_NewProspectCreation dob(String dob) {
		TestUtils.sleep(2000);
		DOBInput.sendKeys(dob);
		return this;
	}

	public synchronized EO_CRM_NewProspectCreation mobEmail() {
		TestUtils.sleep(1000);

		WebElement mobileNumberInput = PerMobNum;
		mobileNumberInput.sendKeys(generateRandomMobileNumber());

		// Assuming you have a WebElement representing an input field for email address
		WebElement emailInput = PerEmail;
		emailInput.sendKeys(generateRandomEmailAddress());

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation last(String lastname) {
		TestUtils.sleep(2000);
		searchBar.sendKeys(lastname);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation values(String value) {
		TestUtils.sleep(1000);
		NBO.sendKeys(value);
		TestUtils.sleep(1000);
		NPS.sendKeys(value);
		TestUtils.sleep(1000);
		NNP.sendKeys(value);
		return this;
	}

	public void Negative() {
		Lastname.click();
		TestUtils.sleep(1000);
		Actions act = new Actions(driver);
		act.sendKeys(Lastname, Keys.ESCAPE).perform();
		TestUtils.sleep(1000);
		Assert.assertTrue(LasErr.isDisplayed(), "Lastname Error not populated");

	}

	public void dashboard() {
		TestUtils.sleep(3000);
		if (DashboradElement.isDisplayed()) {
			System.out.println("User is on CRM HomePage");
		} else {
			System.out.println("Unable to login to server");
		}

	}

	public void BusinessDevolpment() {
		WebElement BusiHead = BusinessHeader;

		String BusiHeadText = BusiHead.getText();

		String expectedText = "Business Development";

		if (BusiHeadText.equals(expectedText)) {

			System.out.println("Element text is as expected: " + BusiHeadText);
		} else {

			TestUtils.sleep(3000);
			BusinessSelect.click();
			BusiSearch.sendKeys("Business");
			Actions actions = new Actions(driver);
			actions.sendKeys(Keys.ENTER).perform();
			System.out.println("Element text Selected : Business Development");
			TestUtils.sleep(2000);
		}
	}

	public void Lead() {
		WebElement LeadHead = LeadsHead;

		String expectedLead = LeadHead.getText();

		String expectedHead = "Leads";

		if (expectedLead.equals(expectedHead)) {
			LeadHead.click();
			System.out.println("Element text is as expected: " + expectedLead);
		} else {
			TestUtils.sleep(1000);
			LeadArrow.click();
			TestUtils.sleep(1000);
			LeadSelect.click();
			System.out.println("Element text Selected : Leads");

		}
	}

	public void newButton() {
		TestUtils.sleep(3000);
		Assert.assertTrue(NewButton.isDisplayed(), "New button is not present");
		NewButton.click();
	}

	public void NewHead() {
		TestUtils.sleep(2000);
		Assert.assertTrue(NewLeadHeader.isDisplayed(), "New Header is not present");
		TestUtils.sleep(1000);
	}

	public void BusinessProfile() {
		WebElement element = ScrollBusiness;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		Assert.assertTrue(ScrollBusiness.isDisplayed(), "Business Profile Header is not present");
	}

	public void Assigne() {
		WebElement element = scrollAssign;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		Assert.assertTrue(scrollAssign.isDisplayed(), "Assign is not present");
	}

	public void External() {
		WebElement element = scrollAssign;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		ExtRecNam.click();
		ExtRecNamSel.click();
		TestUtils.sleep(1000);
	}

	public void Internal() {
		IntRecNam.click();
		IntRecNamSel.click();
		TestUtils.sleep(1000);
	}

	public void wealth() {
		AWMFirmDrop.click();
		dropOsaic.click();
		TestUtils.sleep(1000);
	}

	public void recLead() {
		WebElement element = RecleSource;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		RecleSource.click();
		LeadMarket.click();
		TestUtils.sleep(1000);
	}

	public void curPrac() {
		WebElement element = CurPraDrop;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		CurPraDrop.click();
		SoloSel.click();
		TestUtils.sleep(1000);
	}

	public void finSave() {
		saveButton.click();
	}

	public void toaster() {
		TestUtils.explicit_locate(NewLeadToast);
		Assert.assertTrue(NewLeadToast.isDisplayed(), "Assign is not present");

	}

	public void leadPageHead() {
		TestUtils.sleep(2000);
		Assert.assertTrue(ConveLeButton.isDisplayed(), "LeadHeader is not present");
	}

	public void ClickLead() {
		TestUtils.sleep(4000);
		ConveLeButton.click();
	}

	public void convertHead() {
		TestUtils.sleep(4000);
		Assert.assertTrue(convertHeader.isDisplayed(), "convertHeader is not present");
	}

	public void finaConvert() {
		TestUtils.sleep(4000);
		finalConvert.click();
	}

	public void FinalHeader() {
		TestUtils.explicit_locate(ConvertMessage);
		TestUtils.sleep(2000);
		Assert.assertTrue(ConvertMessage.isDisplayed(), "convertMessage is not present");
		TestUtils.sleep(2000);
	}

	public void openacc() {
		accOpen.click();
	}

	public void inviteBut() {
		TestUtils.sleep(3000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(2000);
		Assert.assertTrue(inviteButton.isDisplayed(), "inviteButton is not present");
	}

	public void invite() {
		inviteButton.click();
		TestUtils.sleep(2000);
		Actions actions = new Actions(driver);
		actions.sendKeys(Keys.ENTER).perform();
		TestUtils.explicit_locate(confirmationInvite);
		TestUtils.sleep(1000);
		invitedClose.click();
		TestUtils.sleep(1000);
		driver.navigate().refresh();
		TestUtils.sleep(2000);
		driver.navigate().refresh();
		TestUtils.sleep(2000);
	}

	public void confirmation() {
		TestUtils.sleep(2000);
		Assert.assertTrue(confirmToaster.isDisplayed(), "confirmButt is not present");
	}

	public void close() {
		TestUtils.explicit_locate(close);
		close.click();
	}

	public void DeleteProspect() {
		TestUtils.sleep(3000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(1000);
		DeleteButton.click();
		TestUtils.sleep(2000);
		Assert.assertTrue(deleteConfirmHeader.isDisplayed(), "Delete Confirmation is not present");
		TestUtils.sleep(2000);
		deletFin.click();
		TestUtils.sleep(2000);
//		Assert.assertTrue(DeleteToast.isDisplayed(), "Delete Toaster is not present");
		TestUtils.sleep(2000);

	}

	public void Select() {
		TestUtils.sleep(4000);
		searchBar.click();
		TestUtils.sleep(2000);
		Actions act = new Actions(driver);
		act.sendKeys(searchBar, "Deat").perform();
		TestUtils.sleep(2000);
		searchSelect.click();
		TestUtils.sleep(3000);
		downClick.click();
		TestUtils.sleep(1000);
		delBut.click();
		TestUtils.sleep(2000);
		deleteFinal.click();
		TestUtils.sleep(2000);
		Assert.assertTrue(finaToast.isDisplayed(), "Delete Toaster is not present");
		TestUtils.sleep(2000);
		LogIm.click();
		TestUtils.sleep(2000);
		logout.click();

	}

	public void contactTab() throws AWTException {
		Actions act = new Actions(driver);
		act.contextClick(contact).perform();
		TestUtils.sleep(2000);

		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_DOWN);
		r.keyRelease(KeyEvent.VK_DOWN);
		TestUtils.sleep(1000);
		r.keyPress(KeyEvent.VK_ENTER);
		r.keyRelease(KeyEvent.VK_ENTER);
		TestUtils.sleep(2000);

	}

	public void oppTab() throws AWTException {
//		Actions act = new Actions(driver);
//		act.contextClick(oppourtunity).perform();
//		TestUtils.sleep(2000);
//
//		Robot r = new Robot();
//		r.keyPress(KeyEvent.VK_DOWN);
//		r.keyRelease(KeyEvent.VK_DOWN);
//		TestUtils.sleep(1000);
//		r.keyPress(KeyEvent.VK_ENTER);
//		r.keyRelease(KeyEvent.VK_ENTER);
//		TestUtils.sleep(1000);
//		for (String handle : driver.getWindowHandles()) {
//			driver.switchTo().window(handle);
//		}
		TestUtils.explicit_locate(oppourtunity);
		TestUtils.sleep(2000);
		oppourtunity.click();

	}

	public void contactEdit() {
		TestUtils.sleep(5000);
		WebElement element = scrollContact;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		Actions act = new Actions(driver);
		act.doubleClick(editContact).perform();
		TestUtils.sleep(1000);
		contactSearch.click();
		TestUtils.sleep(1000);
		selectContact.click();
	}

	public void channel() {
		TestUtils.sleep(2000);
		WebElement element = scrDis;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		channeldrop.click();
		TestUtils.sleep(1000);
		chaSel.click();

	}

	public void homeSelect() {
		WebElement element1 = ScrolThome;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element1);
		dsDrop.click();
		dsSelect.click();
		TestUtils.sleep(1000);
		NFS.click();
		push.click();
		saveforInvite.click();
		TestUtils.sleep(2000);

	}

	public void cases() {
		TestUtils.sleep(3000);
		BusinessSelect.click();
		BusiSearch.sendKeys("cases");
		TestUtils.sleep(1000);
		Actions actions = new Actions(driver);
		actions.sendKeys(Keys.ENTER).perform();
		TestUtils.sleep(1000);
		actions.sendKeys(Keys.ESCAPE).perform();
		TestUtils.sleep(1000);
		deatCase.click();
		TestUtils.sleep(3000);
		delDown.click();
		caseDelete.click();
		TestUtils.sleep(2000);
		deleteFinal.click();
		TestUtils.sleep(3000);

	}

	public static String generateRandomMobileNumber() {
		Random random = new Random();
		// Generating a 10-digit random mobile number
		StringBuilder mobileNumber = new StringBuilder("4");
		for (int i = 0; i < 9; i++) {
			mobileNumber.append(random.nextInt(10));
		}
		return mobileNumber.toString();
	}

	public static String generateRandomEmailAddress() {
		Random random = new Random();
		// Generating a random email address with a random number and a common domain
		String username = "tester" + random.nextInt(1000);
		String domain = "@tes.com";
		return username + domain;
	}

	public void ext() {
		TestUtils.sleep(6000);
		TestUtils.explicit_locate(scrExt);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollBy(0, 650);");
		TestUtils.sleep(1500);
		if (extID.isDisplayed()) {
			String text = extID.getText();
			System.out.println("External Id:" + text);

		} else {
			
			throw new RuntimeException("External ID is not generated. Stopping automation testing.");
		}
	}

}
