@When("^User select the Business Development and leads$")
	public void user_select_the_Business_Development_and_leads() throws Throwable {
		BusinessDevolpment();
		LeadBusiness();
	}

	@When("^User Verifies whether the New Button is available and click$")
	public void user_Verifies_whether_the_New_Button_is_available_and_click() throws Throwable {
		explicit_wait_elementvisibility(LogPage.getNewButton());
		Assert.assertTrue(LogPage.getNewButton().isDisplayed(), "New button is not present");
		clickOnElement(LogPage.getNewButton());
	}

	@When("^User Validate the NewLead Header \"([^\"]*)\" is present$")
	public void user_Validate_the_NewLead_Header_is_present(String arg1) throws Throwable {
		explicit_wait_elementvisibility(LogPage.getNewLeadHeader());
		Assert.assertTrue(LogPage.getNewLeadHeader().isDisplayed(), "New Header is not present");
		System.out.println("@#$%^&*()");
	}

	@When("^user enters \"([^\"]*)\" value in FirstName field and \"([^\"]*)\" value in LastName field$")
	public void user_enters_value_in_FirstName_field_and_value_in_LastName_field(String FisNam, String LasNam)
			throws Throwable {
		enter_values(LogPage.getFirstname(), FisNam);
		enter_values(LogPage.getLastname(), LasNam);
		scorllToElement(LogPage.getScrollDOB());
	}

	@When("^user enters the \"([^\"]*)\" values in FINRACD$")
	public void user_enters_the_values_in_FINRACD(String FIN) throws Throwable {
		enter_values(LogPage.getFINRACRD(), FIN);
	}

	@When("^user enters the \"([^\"]*)\" values in DOB Field$")
	public void user_enters_the_values_in_DOB_Field(String DOB) throws Throwable {
		enter_values(LogPage.getDOBInput(), DOB);
	}

	@When("^User Validate the \"([^\"]*)\" is present$")
	public void user_Validate_the_is_present(String arg1) throws Throwable {
		scorllToElement(LogPage.getScrollBusiness());
		Assert.assertTrue(LogPage.getScrollBusiness().isDisplayed(), "Business Profile Header is not present");
	}

	@When("^user enters \"([^\"]*)\" value in Business Name\\(DBA\\) field and \"([^\"]*)\" value in Branch Name field$")
	public void user_enters_value_in_Business_Name_DBA_field_and_value_in_Branch_Name_field(String BusiName,
			String BranName) throws Throwable {
		enter_values(LogPage.getBusinessName(), BusiName);
		enter_values(LogPage.getBranchName(), BranName);

	}

	@When("^user scroll to Assigning space$")
	public void user_scroll_to_Assigning_space() throws Throwable {
		scorllToElement(LogPage.getScrollAssign());

	}

	@When("^User validate \"([^\"]*)\" is present$")
	public void user_validate_is_present(String arg1) throws Throwable {
		Assert.assertTrue(LogPage.getScrollAssign().isDisplayed(), "Assign is not present");
	}

	@When("^user assign External Recruiter Name$")
	public void user_assign_External_Recruiter_Name() throws Throwable {
		jsExecutorClick(LogPage.getExtRecNam());
		click_element(LogPage.getExtRecNamSel());
	}

	@When("^user assign Internal Recruiter Name$")
	public void user_assign_Internal_Recruiter_Name() throws Throwable {
		click_element(LogPage.getAWMFirmDrop());
		clickOnElement(LogPage.getDropOsaic());
	}

	@When("^User assign wealth management firm$")
	public void user_assign_wealth_management_firm() throws Throwable {
		jsExecutorClick(LogPage.getIntRecNam());
		click_element(LogPage.getIntRecNamSel());

	}

	@When("^User enters \"([^\"]*)\" value in personal mobile Number field and \"([^\"]*)\" in personal email field$")
	public void user_enters_value_in_personal_mobile_Number_field_and_in_personal_email_field(String Mob,
			String Email) {
		scorllToElement(LogPage.getPerMobNum());
		enter_values(LogPage.getPerMobNum(), Mob);
		enter_values(LogPage.getPerEmail(), Email);

	}

	@When("^User selcts the recruiting lead source$")
	public void user_selcts_the_recruiting_lead_source() throws Throwable {
		scorllToElementAndClick(LogPage.getRecleSource());
//		clickOnElement(LogPage.getRecleSource());
		click_element(LogPage.getLeadMarket());
	}

	@When("^user selects 'Solo' from the Current Type of Practice dropdown from Contacting section$")
	public void user_selects_Solo_from_the_Current_Type_of_Practice_dropdown_from_Contacting_section()
			throws Throwable {
		scorllToElementAndClick(LogPage.getCurPraDrop());
		click_element(LogPage.getSoloSel());
	}

	@When("^user click on Save Button$")
	public void user_click_on_Save_Button() throws Throwable {
		click_element(LogPage.getSaveButton());
	}

	@Then("^User Validate the Success message Toaster$")
	public void user_Validate_the_Success_message_Toaster() throws Throwable {
		wait(LogPage.getNewLeadToast());
		String text = getTextFromElement(LogPage.getNewLeadToast());
		System.out.println(text);
	}

	@When("User validate the Header Name")
	public void user_validate_the_Header_Name() {
		checkAndPrintText(LogPage.getLeadHeader());

	}

	@When("^User click on convert lead button$")
	public void user_click_on_convert_lead_button() throws Throwable {
		wait(LogPage.getConveLeButton());
		click_element(LogPage.getConveLeButton());

	}

	@When("^User click on convert button$")
	public void user_click_on_convert_button() throws Throwable {
		Thread.sleep(3000);
		click_element(LogPage.getFinalConvert());

	}

	@Then("^user validate the \"([^\"]*)\" popup message$")
	public void user_validate_the_popup_message(String arg1) throws Throwable {
		wait(LogPage.getConvertMessage());
		Assert.assertTrue(LogPage.getConvertMessage().isDisplayed(), "Convert Message Not Reflects");
	}
