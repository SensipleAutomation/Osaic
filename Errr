package cucumberutils;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.MutableCapabilities;
import org.openqa.selenium.UnexpectedAlertBehaviour;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.safari.SafariOptions;

import com.codoid.products.exception.FilloException;

import cucumberutils.Browsers;
import cucumberutils.Server;
import datadriven.data;

public class Driverselector {
	public static ChromeDriverService service = null;
	public static ThreadLocal<WebDriver> drivers = new ThreadLocal<WebDriver>();
	private ThreadLocal<String> sessionId = new ThreadLocal<String>();
	int headless = Integer.parseInt(System.getProperty("headlessmode"));
	// int closebrowser =1;
	String Tcid = tcid.getqry();
	// public static WebDriver driver= null;

	public WebDriver selectBrowser(String server, String browser) throws MalformedURLException, FilloException {
		String Execution_Server = data.getTestValue("Execution_Server", Tcid);
		String Execution_Platform = data.getTestValue("Execution_Platform", Tcid);
		String Execution_Device = data.getTestValue("Execution_Device", Tcid);
		String Execution_Browser = data.getTestValue("Execution_Browser", Tcid);
		String Downloadedfilepath = System.getProperty("user.dir") + "\\downloadedfiles\\" + Tcid + "\\";
		File theDir = new File(Downloadedfilepath);
		theDir.mkdirs();
		System.out.println(Downloadedfilepath);
		if (server.equalsIgnoreCase(Server.LOCAL.name()) || server.equals("")) {
			if (browser.equalsIgnoreCase(Browsers.CHROME.name())) {
				System.setProperty("webdriver.chrome.driver", "C:\\Users\\rpuliendran\\git\\Checks\\web\\apps\\eo-bdd\\chromedriver91.exe");
				Map<String, Object> prefs = new HashMap<String, Object>();
				prefs.put("profile.default_content_setting_values.notifications", 2);
				prefs.put("credentials_enable_service", false);
				prefs.put("profile.password_manager_enabled", false);
				prefs.put("download.default_directory", Downloadedfilepath);
				// options.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR,
				// UnexpectedAlertBehaviour.ACCEPT);
				ChromeOptions options = new ChromeOptions();
				// options.setExperimentalOption("excludeSwitches",Arrays.asList("test-type"));
				options.setExperimentalOption("prefs", prefs);
				options.addArguments("--test-type");
				options.addArguments("start-maximized");
				options.addArguments("--incognito");
				options.addArguments("disable-infobars");
				options.addArguments("--disable-extensions");
				options.addArguments("--disable-backgrounding-occluded-windows");
				if (headless == 1) {
					options.addArguments("--headless");
					options.addArguments("--disable-gpu");
					options.addArguments("--window-size=1400,800");
				}
				options.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR, UnexpectedAlertBehaviour.IGNORE);
				options.setUnhandledPromptBehaviour(UnexpectedAlertBehaviour.IGNORE);
				// String hosturl=chromeservice.getUrl().toString();
				// driver = new ChromeDriver(options);
				String hosturl = service.getUrl().toString();
				drivers.set(new RemoteWebDriver(new URL(hosturl), options));
				String id = ((RemoteWebDriver) getWebDriver()).getSessionId().toString();
				sessionId.set(id);

			} /*
				 * else if (browser.equalsIgnoreCase(Browsers.FIREFOX.name())) {
				 * System.setProperty("webdriver.gecko.driver", System.getProperty("user.dir") +
				 * "/src/test/resources/drivers/geckodriver.exe"); driver = new FirefoxDriver();
				 * } driver.manage().window().maximize(); } else if
				 * (server.equalsIgnoreCase(Server.SAUCE.name())) { //ms:edgeOptions
				 * //moz:firefoxOptions //Safari:SafariOptions MutableCapabilities sauceOptions
				 * = new MutableCapabilities(); sauceOptions.setCapability("seleniumVersion",
				 * "3.141.59"); sauceOptions.setCapability("maxDuration", 3600);
				 * sauceOptions.setCapability("commandTimeout", 600);
				 * sauceOptions.setCapability("idleTimeout", 1000);
				 * sauceOptions.setCapability("name", Tcid+"_equiptNAOtest_");
				 * sauceOptions.setCapability("build", "decrelease2rerun");
				 * sauceOptions.setCapability("videoUploadOnPass", "false");
				 * sauceOptions.setCapability("public", "private");
				 * //sauceOptions.setCapability("platformName", "Windows 10");
				 * if(Execution_Platform.equalsIgnoreCase("Android")) {
				 * if(Execution_Device.equalsIgnoreCase("Samsung")) { DesiredCapabilities caps =
				 * DesiredCapabilities.android(); caps.setCapability("appiumVersion", "1.20.2");
				 * caps.setCapability(
				 * "deviceName","Samsung Galaxy S9 Plus WQHD GoogleAPI Emulator");
				 * caps.setCapability("deviceOrientation", "portrait");
				 * caps.setCapability("browserName", "Chrome");
				 * caps.setCapability("platformVersion", "8.1");
				 * caps.setCapability("platformName","Android");
				 * caps.setCapability("unicodeKeyboard", true);
				 * caps.setCapability("resetKeyboard", true);
				 * caps.setCapability("autoGrantPermissions", true);
				 * caps.setCapability("MobileCapabilityType.AUTOMATION_NAME",
				 * "AutomationName.ANDROID_UIAUTOMATOR2"); this.driver = new RemoteWebDriver(new
				 * URL(
				 * "http://avincent:715c984a-0993-497e-b308-64ac750a0180@ondemand.saucelabs.com:80/wd/hub"
				 * ),caps); } }else if(Execution_Platform.equalsIgnoreCase("ios")) {
				 * if(Execution_Device.equalsIgnoreCase("iphone")) {
				 * System.out.println("iphone"); DesiredCapabilities caps =
				 * DesiredCapabilities.iphone(); caps.setCapability("appiumVersion", "1.20.1");
				 * caps.setCapability("deviceName","iPhone 12 Pro Max Simulator");
				 * 
				 * caps.setCapability("deviceOrientation", "landscape");
				 * caps.setCapability("platformVersion","14.3");
				 * caps.setCapability("platformName", "iOS");
				 * //caps.setCapability("sauce:options", sauceOptions);
				 * caps.setCapability("browserName", "Safari");
				 * caps.setCapability("unicodeKeyboard", true);
				 * caps.setCapability("resetKeyboard", true);
				 * caps.setCapability("ignoreZoomSetting", true);
				 * //caps.setCapability("autoAcceptAlerts", true);
				 * //caps.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR,
				 * UnexpectedAlertBehaviour.IGNORE);
				 * caps.setCapability(CapabilityType.SUPPORTS_FINDING_BY_CSS, true);
				 * caps.setCapability(CapabilityType.SUPPORTS_JAVASCRIPT, true);
				 * //caps.setUseTechnologyPreview(true); //caps.setCapability("safariOptions",
				 * true); this.driver = new RemoteWebDriver(new URL(
				 * "http://avincent:715c984a-0993-497e-b308-64ac750a0180@ondemand.saucelabs.com:80/wd/hub"
				 * ),caps); }else if(Execution_Device.equalsIgnoreCase("ipad")) {
				 * DesiredCapabilities caps = DesiredCapabilities.iphone();
				 * caps.setCapability("appiumVersion", "1.20.1"); caps.setCapability(
				 * "deviceName","iPad Pro (12.9 inch) (4th generation) Simulator");
				 * caps.setCapability("deviceOrientation", "landscape");
				 * caps.setCapability("platformVersion","14.3");
				 * caps.setCapability("platformName", "iOS");
				 * //caps.setCapability("sauce:options", sauceOptions);
				 * caps.setCapability("browserName", "Safari");
				 * caps.setCapability("unicodeKeyboard", true);
				 * caps.setCapability("resetKeyboard", true);
				 * caps.setCapability("autoAcceptPermissions", true); this.driver = new
				 * RemoteWebDriver(new URL(
				 * "http://avincent:715c984a-0993-497e-b308-64ac750a0180@ondemand.saucelabs.com:80/wd/hub"
				 * ),caps);
				 * 
				 * } }else if(Execution_Platform.equalsIgnoreCase("PC")) {
				 * 
				 * driver.manage().window().maximize(); }else
				 * if(Execution_Platform.equalsIgnoreCase("Mac")) {
				 * 
				 * 
				 * SafariOptions browserOptions = new SafariOptions();
				 * browserOptions.setUseCleanSession(true);
				 * browserOptions.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR,
				 * UnexpectedAlertBehaviour.IGNORE);
				 * browserOptions.setCapability(CapabilityType.SUPPORTS_FINDING_BY_CSS, true);
				 * browserOptions.setCapability(CapabilityType.SUPPORTS_JAVASCRIPT, true);
				 * browserOptions.setUseTechnologyPreview(true);
				 * browserOptions.setCapability("safariOptions", true);
				 * browserOptions.setCapability("platformName", "macOS 10.15");
				 * //browserOptions.setCapability("browserVersion", "13.1");
				 * browserOptions.setCapability("sauce:options", sauceOptions);
				 * browserOptions.setCapability("automaticInspection", true);
				 * browserOptions.setCapability("automaticProfiling", true);
				 * browserOptions.setCapability("cssSelectorsEnabled", true);
				 * browserOptions.setCapability("handlesAlerts", true);
				 * browserOptions.setCapability("javascriptEnabled", true); MutableCapabilities
				 * capabilities = new MutableCapabilities();
				 * capabilities.setCapability("sauce:options", sauceOptions);
				 * capabilities.setCapability("safari:safariOptions", browserOptions);
				 * capabilities.setCapability("browserName", "Safari"); this.driver = new
				 * RemoteWebDriver(new URL(
				 * "http://avincent:715c984a-0993-497e-b308-64ac750a0180@ondemand.saucelabs.com:80/wd/hub"
				 * ),browserOptions); driver.manage().window().maximize(); }
				 */

			// this.driver = new RemoteWebDriver(new
			// URL("http://avincent:715c984a-0993-497e-b308-64ac750a0180@ondemand.saucelabs.com:80/wd/hub"),capabilities);

		}
		drivers.get().manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);

		return drivers.get();
	}

	public static ChromeDriverService initializeservericebrowser() throws IOException {
		service = new ChromeDriverService.Builder().usingDriverExecutable(new File("chromedriver91.exe")).usingPort(9515)
//				 .usingAnyFreePort()
				.build();
		service.start();
		return service;
	}

	public WebDriver getWebDriver() {
		return drivers.get();
	}

	public String getSessionId() {
		return sessionId.get();
	}
}
