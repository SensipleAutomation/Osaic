

	public synchronized CasesApprovalAndClosing loginToEO(String password) {
		if (isElementPresent(Password) && isElementPresent(LogButton)) {
			Password.sendKeys(password);
			LogButton.click();
		} else {
			System.out.println("Password or LogButton element is not present.");
		}
		return this;
	}

	public void overview() {
		TestUtils.sleep(2000);
		if (isElementPresent(OVButton)) {
			OVButton.click();
		}
		Assert.assertTrue(welcomeHeader.isDisplayed(), "Dashboard Welcome Header Not Present");
	}

	public void learnComplete() {
		Assert.assertTrue(learnCompletebutton.isDisplayed(), "Learn Complete Button not present");
		learnCompletebutton.click();
	}

	public void copymail() {

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(1000);
		WebElement element = mailInvited;
		String text = element.getText();
		System.out.println("Mail:" + text);
		TestUtils.sleep(1000);

		StringSelection stringSelection = new StringSelection(text);
		Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
		clipboard.setContents(stringSelection, null);
	}

	public void logmail() throws FilloException, InterruptedException, IOException {
		WebElement targetElement = Mail;
		Actions actions = new Actions(driver);
		targetElement.click();
		actions.keyDown(Keys.CONTROL).sendKeys("v").keyUp(Keys.CONTROL);
		actions.build().perform();

	}

	public synchronized CasesApprovalAndClosing personalInformation(String ssn, String Address, String city,
			String zipco) {
		TestUtils.sleep(1000);
		WebElement element = scrollSSn;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(ssnNumber), "SSN Number field is not present");
		ssnNumber.sendKeys(ssn);

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(homAddress), "Home Address field is not present");
		homAddress.click();
		homAddress.sendKeys(Address);

		Assert.assertTrue(isElementPresent(cityText), "City field is not present");
		cityText.sendKeys(city);

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(stateDrop), "State Drop-down is not present");
		stateDrop.click();
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(selectState), "Select State option is not present");
		selectState.click();

		Assert.assertTrue(isElementPresent(zip), "Zip Code field is not present");
		zip.sendKeys(zipco);

		js.executeScript("arguments[0].scrollIntoView();", saveScroll);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(perSaveButton), "Save Button is not present");
		perSaveButton.click();

		TestUtils.sleep(2000);
		return this;
	}

	public synchronized CasesApprovalAndClosing BusinessInformation(String current, String address, String city,
			String zipc, String phone) {
		WebElement element = scrBusi;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(curBD), "Current Business Description field is not present");
		curBD.sendKeys(current);

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(busiAddress), "Business Address field is not present");
		busiAddress.click();
		busiAddress.sendKeys(address);

		Assert.assertTrue(isElementPresent(busiCity), "Business City field is not present");
		busiCity.sendKeys(city);

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(busiStateDrop), "Business State Drop-down is not present");
		busiStateDrop.click();
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(busSelectState), "Business Select State option is not present");
		busSelectState.click();

		Assert.assertTrue(isElementPresent(busZip), "Business Zip Code field is not present");
		busZip.sendKeys(zipc);

		Assert.assertTrue(isElementPresent(busPhone), "Business Phone field is not present");
		busPhone.sendKeys(phone);

		js.executeScript("arguments[0].scrollIntoView();", busiCity);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(busSaveButton), "Business Save Button is not present");
		busSaveButton.click();

		TestUtils.sleep(2000);
		return this;

	}

	public void affiliationQuestion() {
		WebElement element = scrAffi;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(affTodayques), "Affiliation Today's Questions field is not present");
		affTodayques.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(affTodquesSelect),
				"Affiliation Today's Questions Select field is not present");
		affTodquesSelect.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(joiningQues), "Joining Questions field is not present");
		joiningQues.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(joiningQuesSelect), "Joining Questions Select field is not present");
		joiningQuesSelect.click();

		TestUtils.sleep(2000);

		Assert.assertTrue(isElementPresent(registered), "Registered field is not present");
		registered.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(dateBox), "Date Box field is not present");
		dateBox.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(datToday), "Today's Date field is not present");
		datToday.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(affiQues), "Affiliation Questions field is not present");
		affiQues.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(affiQueSel), "Affiliation Questions Select field is not present");
		affiQueSel.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(branchQue), "Branch Questions field is not present");
		branchQue.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(branchQueSel), "Branch Questions Select field is not present");
		branchQueSel.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(affSave), "Affiliation Save Button is not present");
		affSave.click();

		js.executeScript("window.scrollTo(0, document.body.scrollHeight)");
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(proInfCont), "Professional Information Continue Button is not present");
		proInfCont.click();
		TestUtils.sleep(1000);
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(2000);

	}

	public synchronized CasesApprovalAndClosing revenue(String Total, String Split) {
		WebElement element = scrRevenue;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);

		Assert.assertTrue(isElementPresent(totTrail), "Total Trail field is not present");
		totTrail.sendKeys(Total);

		Assert.assertTrue(isElementPresent(platform), "Platform field is not present");
		platform.sendKeys(Split);

		Assert.assertTrue(isElementPresent(money), "Money field is not present");
		money.sendKeys(Split);

		Assert.assertTrue(isElementPresent(trail), "Trail field is not present");
		trail.sendKeys(Split);

		Assert.assertTrue(isElementPresent(Schwab), "Schwab field is not present");
		Schwab.sendKeys(Split);

		Assert.assertTrue(isElementPresent(Annuities), "Annuities field is not present");
		Annuities.sendKeys(Split);

		Assert.assertTrue(isElementPresent(Insurance), "Insurance field is not present");
		Insurance.sendKeys(Split);

		Assert.assertTrue(isElementPresent(Mutual), "Mutual field is not present");
		Mutual.sendKeys(Split);

		Assert.assertTrue(isElementPresent(General), "General field is not present");
		General.sendKeys(Split);

		Assert.assertTrue(isElementPresent(Alternatives), "Alternatives field is not present");
		Alternatives.sendKeys(Split);

		Assert.assertTrue(isElementPresent(countClick), "Count Click field is not present");
		countClick.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(perSaveButton), "Save Button is not present");
		perSaveButton.click();
		TestUtils.sleep(2000);
		return this;

	}

	public synchronized CasesApprovalAndClosing AssestsAccounts(String Tot, String Spl) {
		WebElement element = scrAssests;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		Assert.assertTrue(isElementPresent(AUA), "AUA field is not present");
		AUA.sendKeys(Tot);

		Assert.assertTrue(isElementPresent(platform2), "Platform field is not present");
		platform2.sendKeys(Spl);

		Assert.assertTrue(isElementPresent(Money2), "Money field is not present");
		Money2.sendKeys(Spl);

		Assert.assertTrue(isElementPresent(Fidelity), "Fidelity field is not present");
		Fidelity.sendKeys(Spl);

		Assert.assertTrue(isElementPresent(Variable), "Variable field is not present");
		Variable.sendKeys(Spl);

		Assert.assertTrue(isElementPresent(Brokerage), "Brokerage field is not present");
		Brokerage.sendKeys(Spl);

		Assert.assertTrue(isElementPresent(Direct), "Direct field is not present");
		Direct.sendKeys(Spl);

		Assert.assertTrue(isElementPresent(clickBrok), "Click Brokerage field is not present");
		clickBrok.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(noOfAcc), "Number of Accounts field is not present");
		noOfAcc.sendKeys(Spl);

		TestUtils.sleep(1000);
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", busSaveButton);
		Assert.assertTrue(isElementPresent(busSaveButton), "Save Button is not present");
		busSaveButton.click();
		TestUtils.sleep(1000);
		return this;

	}

	public void topProducts() {
		WebElement element = scrAssests;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(notApp1), "Not App 1 field is not present");
		notApp1.click();

		Assert.assertTrue(isElementPresent(notApp2), "Not App 2 field is not present");
		notApp2.click();

		Assert.assertTrue(isElementPresent(notApp3), "Not App 3 field is not present");
		notApp3.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(affSave), "Affiliation Save Button is not present");
		affSave.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(proInfCont), "Professional Information Continue Button is not present");
		proInfCont.click();

		TestUtils.sleep(2000);

		Assert.assertTrue(isElementPresent(okConfirm), "OK Confirm Button is not present");
		okConfirm.click();
		TestUtils.sleep(1000);
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(2000);

	}

	public void crmApprovals() {
		WebElement element = relat;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		TestUtils.sleep(1000);
		relatedClick.click();
		TestUtils.sleep(3000);
		Assert.assertTrue(isElementPresent(viewAll), "View All Button is not present");
		viewAll.click();
		TestUtils.sleep(2000);
//		driver.navigate().refresh();
//		TestUtils.sleep(6000);
//		refresh.click();
//		TestUtils.sleep(2000);
//		refresClick.click();
//		TestUtils.sleep(4000);
//		refresh.click();
//		refresClick.click();
//		TestUtils.sleep(4000);
//		refresh.click();
//		case2.click();
//		TestUtils.sleep(2000);

		WebDriverWait wait = new WebDriverWait(driver, 10);

		while (true) {
			try {
				System.out.println("Clicking on the first element");
				WebElement firstElement = wait.until(ExpectedConditions.elementToBeClickable(refresh));
				firstElement.click();

				Thread.sleep(1000);

				System.out.println("Clicking on the second element");
				WebElement secondElement = wait.until(ExpectedConditions.elementToBeClickable(refresClick));
				secondElement.click();

				System.out.println("Checking if the third element is displayed and enabled");
				WebElement thirdElement = case2;

				if (thirdElement.isDisplayed() && thirdElement.isEnabled()) {
					TestUtils.sleep(2000);
					thirdElement.click();
					System.out.println("Third element found. Exiting the loop.");
					break;
				}
			} catch (org.openqa.selenium.NoSuchElementException e) {

				System.out.println("Second element not found. Retrying...");
			} catch (Exception e) {

				System.out.println("Exception occurred: " + e.getMessage());
				e.printStackTrace();
			}
		}

	}

	public synchronized CasesApprovalAndClosing processing(String value) {
		Assert.assertTrue(isElementPresent(process), "Process Button is not present");
		process.click();

		WebElement element = scrApr;
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", element);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(statusDrop), "Status Drop Button is not present");
		statusDrop.click();

		Assert.assertTrue(isElementPresent(clsClick), "CLS Click Button is not present");
		clsClick.click();

		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(forApp), "For App Button is not present");
		forApp.click();

		Assert.assertTrue(isElementPresent(forAppSelect), "For App Select Button is not present");
		forAppSelect.click();

		WebElement element1 = scrApr;
		js.executeScript("arguments[0].scrollIntoView();", element1);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(apSave), "AP Save Button is not present");
		apSave.click();
		TestUtils.sleep(2000);

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases Button is not present");
		backTOcases.click();
		TestUtils.sleep(2000);

		Assert.assertTrue(isElementPresent(case3), "Case 3 Button is not present");
		case3.click();
		TestUtils.sleep(2000);

		Assert.assertTrue(isElementPresent(prelimCaseProcess), "Prelim Case Process Button is not present");
		prelimCaseProcess.click();
		js.executeScript("arguments[0].scrollIntoView();", scrPril);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(pretext1), "Pretext 1 Button is not present");
		pretext1.click();
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(pretext1Send), "Pretext 1 Send Field is not present");
		pretext1Send.sendKeys(value);
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(case3status), "Case 3 Status Button is not present");
		case3status.click();
		clsClick.click();
		case3drop.click();
		forAppSelect.click();

		js.executeScript("arguments[0].scrollIntoView();", case3status);

		Assert.assertTrue(isElementPresent(case3Save), "Case 3 Save Button is not present");
		case3Save.click();
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases Button is not present");
		backTOcases.click();
		TestUtils.sleep(1000);

		if (approvedCheck.isDisplayed()) {
			String actualText = approvedCheck.getText();
			String expectedText = "Approved";

			if (actualText.equals(expectedText)) {
				System.out.println("Learn Step 3 cases Approved");
			} else {
				throw new RuntimeException(
						"Cases Not Approved. Actual text: " + actualText + ". Stopping automation testing.");
			}
		} else {
			throw new RuntimeException("Cases Not Approved. Element not displayed. Stopping automation testing.");
		}
		return this;
	}

	public void preliminary() {
		TestUtils.sleep(3000);
		Assert.assertTrue(isElementPresent(step3Edit), "Step 3 Edit Button is not present");
		step3Edit.click();

		TestUtils.sleep(3000);

		JavascriptExecutor js = (JavascriptExecutor) driver;

		Assert.assertTrue(isElementPresent(proInfCont), "Professional Information Continue Button is not present");

		for (int i = 0; i < 3; i++) {
			js.executeScript("arguments[0].scrollIntoView();", proInfCont);
			TestUtils.sleep(1000);

			Assert.assertTrue(isElementPresent(proInfCont), "Professional Information Continue Button is not present");
			proInfCont.click();
			TestUtils.sleep(2000);
		}

		TestUtils.sleep(2000);

	}

	public synchronized CasesApprovalAndClosing uploadGDCDoc(String value) {
		TestUtils.sleep(2000);

		Assert.assertTrue(uploadPriorYearGdcLink.isEnabled(), "Upload Prior Year GDC Link is not enabled");
		uploadPriorYearGdcLink.click();
//		String upl = "\\\\resources\\\\Uploads\\\\Prior Year GDC.pdf";

		TestUtils.uploadFile("\\resources\\Uploads\\Prior Year GDC.pdf");
		TestUtils.sleep(1000);

		Assert.assertTrue(uploadYearToDateGdcLink.isDisplayed(), "Upload Year-to-date GDC Link is not displayed");
		uploadYearToDateGdcLink.click();
		TestUtils.uploadFile("\\resources\\Uploads\\Year-to-date GDC.pdf");
		TestUtils.sleep(1000);

		Assert.assertTrue(businesMixByPercentageLink.isDisplayed(), "Business Mix by Percentage Link is not displayed");
		businesMixByPercentageLink.click();
		TestUtils.sleep(1000);
		TestUtils.uploadFile("\\resources\\Uploads\\Business Mix by Percentage.pdf");
		TestUtils.sleep(1000);

		Assert.assertTrue(assetsUnderManagementTotalsLink.isDisplayed(),
				"assetsUnderManagementTotalsLink is not displayed");
		assetsUnderManagementTotalsLink.click();
		TestUtils.sleep(1000);
		TestUtils.uploadFile("\\resources\\Uploads\\Assets Under Management Totals.pdf");
		TestUtils.sleep(1000);

		Assert.assertTrue(productNamesAndAumReportLink.isDisplayed(), "productNamesAndAumReportLink is not displayed");
		productNamesAndAumReportLink.click();
		TestUtils.sleep(1000);
		TestUtils.uploadFile("\\resources\\Uploads\\Product Names and AUM Report.pdf");
		TestUtils.sleep(1000);

		Assert.assertTrue(productSponsorReportLink.isDisplayed(), "productSponsorReportLink is not displayed");
		productSponsorReportLink.click();
		TestUtils.sleep(1000);
		TestUtils.uploadFile("\\resources\\Uploads\\Product Sponsor Reports.pdf");
		TestUtils.sleep(1000);

		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView();", scrConBut);
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(upconfirmButton), "Upconfirm Button is not present");
		upconfirmButton.click();
		TestUtils.sleep(2000);

		Assert.assertTrue(isElementPresent(saveBtn), "Save Button is not present");
		saveBtn.click();
		TestUtils.sleep(2500);

		js.executeScript("arguments[0].scrollIntoView();", saveBtn);

		Assert.assertTrue(isElementPresent(firstQestion), "First Question is not present");
		firstQestion.click();
		TestUtils.sleep(2000);
		firstQestionAns.sendKeys(value);

		Assert.assertTrue(isElementPresent(secondQuestion), "Second Question is not present");
		secondQuestion.click();
		TestUtils.sleep(2000);
		secQuesAns.sendKeys(value);
		Assert.assertTrue(isElementPresent(saveBtn2), "Save Button 2 is not present");
		TestUtils.sleep(2000);
		saveBtn2.click();
		TestUtils.sleep(3000);
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", currentBrokerHeader);
		TestUtils.sleep(1000);
		if (currentBrokerHeader.isDisplayed()) {
			Assert.assertTrue(isElementPresent(currentBroker), "currentBroker upload is not present");
			currentBroker.click();
			TestUtils.sleep(1000);
			TestUtils.uploadFile("\\resources\\Uploads\\Product Names and AUM Report.pdf");
			TestUtils.sleep(1000);
			Assert.assertTrue(isElementPresent(curentBrokerCheck), "Current Broker check is not present");
			curentBrokerCheck.click();
			Assert.assertTrue(isElementPresent(curBroSAVE), "Current Broker check is not present");
			curBroSAVE.click();
		}

		Assert.assertTrue(isElementPresent(continueBtn), "Continue Button is not present");
		continueBtn.click();
		TestUtils.sleep(2000);
		js.executeScript("window.scrollTo(0, 0);");
		return this;

	}

	public void scheduleFind() throws InterruptedException {
		WebDriverWait wait = new WebDriverWait(driver, 10);

		while (true) {
			try {
				System.out.println("Clicking on the first element");
				WebElement firstElement = wait.until(ExpectedConditions.elementToBeClickable(refresh));
				firstElement.click();

				Thread.sleep(1000);

				System.out.println("Clicking on the second element");
				WebElement secondElement = wait.until(ExpectedConditions.elementToBeClickable(refresClick));
				secondElement.click();

				System.out.println("Checking if the fourth element is displayed and enabled");
				WebElement thirdElement = scheduleCase;

				if (thirdElement.isDisplayed() && thirdElement.isEnabled()) {
					TestUtils.sleep(2000);
					thirdElement.click();
					System.out.println("Third element found. Exiting the loop.");
					break;
				}
			} catch (org.openqa.selenium.NoSuchElementException e) {

				System.out.println("Second element not found. Retrying...");
			} catch (Exception e) {

				System.out.println("Exception occurred: " + e.getMessage());
				e.printStackTrace();
			}
		}
		reactions();

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases button is not present");
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(sch2Case), "Sch2 Case button is not present");
		sch2Case.click();
		reactions();

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases button is not present");
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(bookCase), "Book Case button is not present");
		bookCase.click();
		reactions();

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases button is not present");
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(boBusCase), "Bo Bus Case button is not present");
		boBusCase.click();
		reactions();

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases button is not present");
		backTOcases.click();
		Thread.sleep(2000);

		Assert.assertTrue(isElementPresent(refresh), "Refresh button is not present");
		refresh.click();
		Thread.sleep(2000);

		Assert.assertTrue(isElementPresent(refresClick), "Refres Click button is not present");
		refresClick.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(refresh), "Refresh button is not present");
		refresh.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(assesmentCase), "Assessment Case button is not present");
		assesmentCase.click();
		reactions();

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases button is not present");
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(validateCase), "Validate Case button is not present");
		validateCase.click();
		reactions();

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases button is not present");
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(contractCase), "Contract Case button is not present");
		contractCase.click();
		reactions();

		Assert.assertTrue(isElementPresent(backTOcases), "Back to Cases button is not present");
		backTOcases.click();
		Thread.sleep(1000);

		refreshCase();
	}

	public void reactions() throws InterruptedException {
		Thread.sleep(2000);
		schProcess.click();
		Thread.sleep(1000);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", schStatus);
		Thread.sleep(1000);
		schStatus.click();
		Thread.sleep(1000);
		schClosed.click();
		Thread.sleep(1000);
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", scEoStatus);
		Thread.sleep(1000);
		scEoStatus.click();
		Thread.sleep(1000);
		scEoApproved.click();
		Thread.sleep(1000);
		js.executeScript("arguments[0].scrollIntoView({block: 'center'});", schSave);
		Thread.sleep(1000);
		schSave.click();
		Thread.sleep(2000);
	}

	public void refreshCase() throws InterruptedException {
		Thread.sleep(1000);
		refresh.click();
		Thread.sleep(2000);
		refresClick.click();
		Thread.sleep(1000);
		refresh.click();
	}

	public void reviewCases() throws InterruptedException {
		Assert.assertTrue(isElementPresent(reviewCase), "reviewCase is not present");
		reviewCase.click();
		reactions();
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(frmCase), "frmCase is not present");
		frmCase.click();
		reactions();
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(rateCase), "rateCase is not present");
		rateCase.click();
		reactions();
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(setmeetCase), "setmeetCase is not present");
		setmeetCase.click();
		reactions();
		backTOcases.click();
		Thread.sleep(1000);

		Assert.assertTrue(isElementPresent(setIntCase), "setIntCase is not present");
		setIntCase.click();
		reactions();
		Thread.sleep(2000);
		backTOcases.click();
		refreshCase();

		Assert.assertTrue(isElementPresent(extrecCase), "extrecCase is not present");
		extrecCase.click();
		reactions();
		Thread.sleep(2000);
		backTOcases.click();
		refreshCase();

		Assert.assertTrue(isElementPresent(recfinCase), "recfinCase is not present");
		recfinCase.click();
		reactions();
		Thread.sleep(2000);
		backTOcases.click();
		Thread.sleep(1000);

	}

	public void clickNobutton() {
		for (int i = 0; i < 22; i++) {

			WebElement noButton = backConsentnoBtn.get(i);

			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", noButton);

			noButton.click();
		}
		TestUtils.sleep(1000);
		quesSaveBut.click();
		TestUtils.sleep(1000);
	}

	public void faircreditCheck() {
		if (fairCreditReportingActAccordionTab.isDisplayed()) {
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});",
					fairCreditReportingAcknowledgeCheckbox);
			fairCreditReportingAcknowledgeCheckbox.click();
			TestUtils.sleep(1000);

		}
		if (investigationTab.isDisplayed()) {
			((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});",
					investigativeConsumerReportAcknowledgeCheckbox);
			investigativeConsumerReportAcknowledgeCheckbox.click();
			TestUtils.sleep(1000);
		}

	}

	public synchronized CasesApprovalAndClosing backConsent(String value) {

		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", backgroundTab);
		Assert.assertTrue(isElementPresent(backgroundTab), "Background Header is not present");
		TestUtils.sleep(1000);
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", name);
		Assert.assertTrue(isElementPresent(name), "Name field is not present");
		name.sendKeys(value);
		signaTure.click();
		wait.until(ExpectedConditions.visibilityOf(signatureField));
		signatureField.sendKeys(value);
		signatureSubmit.click();
		sigSave.click();
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", summaryTab);
		Assert.assertTrue(isElementPresent(summaryTab), "Background Header is not present");
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", summaryCheck);
		summaryCheck.click();
		wait.until(ExpectedConditions.elementToBeClickable(backgroungContinue));
		backgroungContinue.click();

		return this;
	}

	public void outsideBusiness() {
		wait.until(ExpectedConditions.elementToBeClickable(accessTab));
		Assert.assertTrue(isElementPresent(accessTab), "Access Header is not present");
		((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", launchReged);
		launchReged.click();
	}

	private boolean isElementPresent(WebElement element) {
		try {
			return element.isDisplayed();
		} catch (NoSuchElementException e) {
			return false;
		}
	}
}
