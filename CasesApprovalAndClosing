public synchronized EO_CRM_NewProspectCreation loginToCRM(String username, String password) {

		Assert.assertTrue(isElementPresent(Mail), "Mail field is not present");
		Assert.assertTrue(isElementPresent(Password), "Password field is not present");
		Assert.assertTrue(isElementPresent(LogButton), "Login button is not present");

		Mail.sendKeys(username);
		Password.sendKeys(password);
		LogButton.click();

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation firstLast(String Firstnam, String lastname) {

		Assert.assertTrue(isElementPresent(Firstname), "First name field is not present");
		Assert.assertTrue(isElementPresent(Lastname), "Last name field is not present");

		Firstname.sendKeys(Firstnam);
		Lastname.sendKeys(lastname);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation finra(String Finra) {

		Assert.assertTrue(isElementPresent(FINRACRD), "Finra field is not present");

		FINRACRD.sendKeys(Finra);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation BusiNB(String Name, String Branch) {

		Assert.assertTrue(isElementPresent(BusinessName), "Business name field is not present");
		Assert.assertTrue(isElementPresent(BranchName), "Branch name field is not present");

		BusinessName.sendKeys(Name);
		BranchName.sendKeys(Branch);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation dob(String dob) {

		Assert.assertTrue(isElementPresent(DOBInput), "DOB field is not present");

		DOBInput.sendKeys(dob);

		return this;
	}

	private boolean isElementPresent(WebElement element) {
		try {
			return element.isDisplayed();
		} catch (NoSuchElementException e) {
			return false;
		}
	}

	public synchronized EO_CRM_NewProspectCreation mobEmail() {
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(PerMobNum), "Personal Mobile Number field is not present");
		Assert.assertTrue(isElementPresent(PerEmail), "Personal Email field is not present");

		WebElement mobileNumberInput = PerMobNum;
		mobileNumberInput.sendKeys(generateRandomMobileNumber());

		WebElement emailInput = PerEmail;
		emailInput.sendKeys(generateRandomEmailAddress());

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation last(String lastname) {
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(searchBar), "Search bar field is not present");

		searchBar.sendKeys(lastname);

		return this;
	}

	public synchronized EO_CRM_NewProspectCreation values(String value) {
		TestUtils.sleep(1000);

		Assert.assertTrue(isElementPresent(NBO), "NBO field is not present");
		Assert.assertTrue(isElementPresent(NPS), "NPS field is not present");
		Assert.assertTrue(isElementPresent(NNP), "NNP field is not present");

		NBO.sendKeys(value);
		TestUtils.sleep(1000);
		NPS.sendKeys(value);
		TestUtils.sleep(1000);
		NNP.sendKeys(value);

		return this;
	}

	public void dashboard() {
		TestUtils.sleep(1000);
		if (DashboradElement.isDisplayed()) {
			System.out.println("User is on CRM HomePage");
		} else {
			System.out.println("Unable to login to server");
		}

	}

	public void BusinessDevolpment() {
		WebElement BusiHead = BusinessHeader;

		String BusiHeadText = BusiHead.getText();

		String expectedText = "Business Development";

		if (BusiHeadText.equals(expectedText)) {

			System.out.println("Element text is as expected: " + BusiHeadText);
		} else {

			TestUtils.sleep(3000);
			BusinessSelect.click();
			BusiSearch.sendKeys("Business");
			act.sendKeys(Keys.ENTER).perform();
			System.out.println("Element text Selected : Business Development");
			TestUtils.sleep(2000);
		}
	}

	public void Lead() {
		WebElement LeadHead = LeadsHead;

		String expectedLead = LeadHead.getText();

		String expectedHead = "Leads";

		if (expectedLead.equals(expectedHead)) {
			LeadHead.click();
			System.out.println("Element text is as expected: " + expectedLead);
		} else {
			TestUtils.sleep(1000);
			LeadArrow.click();
			TestUtils.sleep(1000);
			LeadSelect.click();
			System.out.println("Element text Selected : Leads");

		}
	}

	public void newButton() {
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(NewButton), "New button is not present");
		NewButton.click();
	}

	public void NewHead() {
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(NewLeadHeader), "New Header is not present");
	}

	public void BusinessProfile() {
		WebElement element = ScrollBusiness;
		js.executeScript("arguments[0].scrollIntoView();", element);
		Assert.assertTrue(isElementPresent(ScrollBusiness), "Business Profile Header is not present");
	}

	public void Assigne() {
		WebElement element = scrollAssign;
		js.executeScript("arguments[0].scrollIntoView();", element);
		Assert.assertTrue(isElementPresent(scrollAssign), "Assign is not present");
	}

	public void External() {
		WebElement element = scrollAssign;
		js.executeScript("arguments[0].scrollIntoView();", element);
		ExtRecNam.click();
		ExtRecNamSel.click();
		TestUtils.sleep(1000);
	}

	public void Internal() {
		Assert.assertTrue(isElementPresent(IntRecNam), "Internal Receiver Name is not present");
		IntRecNam.click();
		IntRecNamSel.click();
		TestUtils.sleep(1000);
	}

	public void wealth() {
		AWMFirmDrop.click();
		dropOsaic.click();
		TestUtils.sleep(1000);
	}

	public void recLead() {
		WebElement element = RecleSource;
		js.executeScript("arguments[0].scrollIntoView();", element);
		RecleSource.click();
		LeadMarket.click();
		TestUtils.sleep(1000);
	}

	public void curPrac() {
		WebElement element = CurPraDrop;
		js.executeScript("arguments[0].scrollIntoView();", element);
		CurPraDrop.click();
		SoloSel.click();
		TestUtils.sleep(1000);
	}

	public void finSave() {
		saveButton.click();
	}

	public void toaster() {
		wait.until(ExpectedConditions.visibilityOf(NewLeadToast));
		Assert.assertTrue(isElementPresent(NewLeadToast), "Toaster is not present");
	}

	public void leadToaster() {
		wait.until(ExpectedConditions.visibilityOf(leadConvertToast));
		Assert.assertTrue(isElementPresent(leadConvertToast), "Toaster is not present");
	}

	public void ClickLead() {
		wait.until(ExpectedConditions.visibilityOf(ConveLeButton));
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(ConveLeButton), "ConveLeButton is not present");
		ConveLeButton.click();
	}

	public void convertHead() {
		wait.until(ExpectedConditions.visibilityOf(convertHeader));
		Assert.assertTrue(isElementPresent(convertHeader), "Convert Header is not present");
	}

	public void finaConvert() {
		wait.until(ExpectedConditions.visibilityOf(beforeConvert));
		Assert.assertTrue(isElementPresent(beforeConvert), "beforeConvert is not present");
		TestUtils.sleep(1000);
		Assert.assertTrue(isElementPresent(finalConvert), "ConveLeButton is not present");
		finalConvert.click();
	}

	public void FinalHeader() {
		TestUtils.explicit_locate(ConvertMessage);
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(ConvertMessage), "Convert Message is not present");
		TestUtils.sleep(2000);
	}

//	public void openacc() {
//		accOpen.click();
//	}

	public void inviteBut() {
		TestUtils.sleep(3000);
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(inviteButton), "Invite Button is not present");
	}

	public void invite() {
		Assert.assertTrue(isElementPresent(inviteButton), "Invite Button is not present");
		inviteButton.click();
		TestUtils.sleep(3000);
		act.sendKeys(Keys.ENTER).perform();
		TestUtils.sleep(2000);
		TestUtils.explicit_locate(confirmationInvite);
		Assert.assertTrue(isElementPresent(confirmationInvite), "confirmationInvite is not present");
		invitedClose.click();
		TestUtils.sleep(2000);
		driver.navigate().refresh();
		TestUtils.sleep(2000);
	}

	public void confirmation() {
		TestUtils.sleep(2000);
		Assert.assertTrue(isElementPresent(confirmToaster), "Confirmation Toaster is not present");
		Assert.assertTrue(confirmToaster.isDisplayed(), "Confirmation Toaster is not displayed");
	}

	public void close() {
		TestUtils.explicit_locate(close);
		Assert.assertTrue(isElementPresent(close), "Close button is not present");
		close.click();
	}

	public void DeleteProspect() {
		TestUtils.sleep(3000);
		js.executeScript("window.scrollTo(0, 0);");
		TestUtils.sleep(1000);

		if (isElementPresent(DeleteButton) && isElementPresent(deleteConfirmHeader)) {
			DeleteButton.click();
			TestUtils.sleep(2000);
			Assert.assertTrue(deleteConfirmHeader.isDisplayed(), "Delete Confirmation is not present");
			TestUtils.sleep(2000);
			deletFin.click();
			TestUtils.sleep(2000);
		}
	}

	public void Select() {
		TestUtils.sleep(4000);

		if (isElementPresent(searchBar)) {
			searchBar.click();
			TestUtils.sleep(2000);

			if (isElementPresent(searchSelect) && isElementPresent(downClick) && isElementPresent(delBut)
					&& isElementPresent(deleteFinal) && isElementPresent(finaToast) && isElementPresent(LogIm)
					&& isElementPresent(logout)) {
				act.sendKeys(searchBar, "Deat").perform();
				TestUtils.sleep(2000);

				searchSelect.click();
				TestUtils.sleep(3000);
				downClick.click();
				TestUtils.sleep(1000);
				delBut.click();
				TestUtils.sleep(2000);
				deleteFinal.click();
				TestUtils.sleep(2000);

				if (isElementPresent(finaToast)) {
					Assert.assertTrue(finaToast.isDisplayed(), "Delete Toaster is not present");
					TestUtils.sleep(2000);
					LogIm.click();
					TestUtils.sleep(2000);
					logout.click();
				}
			}
		}
	}

	public void contactTab() throws AWTException {
		act.contextClick(contact).perform();
		TestUtils.sleep(2000);

		Robot r = new Robot();
		r.keyPress(KeyEvent.VK_DOWN);
		r.keyRelease(KeyEvent.VK_DOWN);
		TestUtils.sleep(1000);
		r.keyPress(KeyEvent.VK_ENTER);
		r.keyRelease(KeyEvent.VK_ENTER);
		TestUtils.sleep(2000);

	}

	public void oppTab() {
		TestUtils.explicit_locate(oppourtunity);

		if (isElementPresent(oppourtunity)) {
			TestUtils.sleep(2000);
			oppourtunity.click();
		}
	}

	public void contactEdit() {
		TestUtils.sleep(5000);
		WebElement element = scrollContact;
		js.executeScript("arguments[0].scrollIntoView();", element);
		act.doubleClick(editContact).perform();
		TestUtils.sleep(1000);
		contactSearch.click();
		TestUtils.sleep(1000);
		selectContact.click();
	}

	public void channel() {
		TestUtils.sleep(2000);
		WebElement element = scrDis;
		js.executeScript("arguments[0].scrollIntoView();", element);
		channeldrop.click();
		TestUtils.sleep(1000);
		if (isElementPresent(chaSel)) {
			chaSel.click();
		}

	}

	public void homeSelect() {
		WebElement element1 = ScrolThome;
		js.executeScript("arguments[0].scrollIntoView();", element1);
		TestUtils.sleep(1000);
		if (isElementPresent(dsDrop) && isElementPresent(NFS) && isElementPresent(push)
				&& isElementPresent(saveforInvite)) {
			dsDrop.click();
			dsSelect.click();
			TestUtils.sleep(1000);
			NFS.click();
			push.click();
			saveforInvite.click();
			TestUtils.sleep(2000);
		}
	}

	public void cases() {
		TestUtils.sleep(3000);

		if (isElementPresent(BusinessSelect) && isElementPresent(BusiSearch) && isElementPresent(deatCase)
				&& isElementPresent(delDown) && isElementPresent(caseDelete) && isElementPresent(deleteFinal)) {
			BusinessSelect.click();
			BusiSearch.sendKeys("cases");
			TestUtils.sleep(1000);
			act.sendKeys(Keys.ENTER).perform();
			TestUtils.sleep(1000);
			act.sendKeys(Keys.ESCAPE).perform();
			TestUtils.sleep(1000);
			deatCase.click();
			TestUtils.sleep(3000);
			delDown.click();
			caseDelete.click();
			TestUtils.sleep(2000);
			deleteFinal.click();
			TestUtils.sleep(3000);
		}
	}

	public static String generateRandomMobileNumber() {
		Random random = new Random();

		StringBuilder mobileNumber = new StringBuilder("3");
		for (int i = 0; i < 9; i++) {
			mobileNumber.append(random.nextInt(10));
		}
		return mobileNumber.toString();
	}

	public static String generateRandomEmailAddress() {
		Random random = new Random();

		String username = "Automatest" + random.nextInt(1000);
		String domain = "@test.com";
		return username + domain;
	}

	public void ext() {
		TestUtils.sleep(6000);
		TestUtils.explicit_locate(scrExt);
		js.executeScript("window.scrollBy(0, 650);");
		TestUtils.sleep(1500);
		if (extID.isDisplayed()) {
			String text = extID.getText();
			System.out.println("External Id:" + text);
		} else {

			driver.navigate().refresh();
			js.executeScript("window.scrollBy(0, 650);");

			if (extID.isDisplayed()) {
				String text = extID.getText();
				System.out.println("External Id:" + text);
			} else {

				throw new RuntimeException("External ID is not generated. Stopping automation testing.");
			}
		}
